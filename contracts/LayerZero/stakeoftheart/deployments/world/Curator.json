{
  "address": "0x22192e511ce6Fb2e1D998CEc8ddc5e86f11bb812",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_endpoint",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_delegate",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "InvalidDelegate",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidEndpointCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LzTokenUnavailable",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "eid",
          "type": "uint32"
        }
      ],
      "name": "NoPeer",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "msgValue",
          "type": "uint256"
        }
      ],
      "name": "NotEnoughNative",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "OnlyEndpoint",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "eid",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "sender",
          "type": "bytes32"
        }
      ],
      "name": "OnlyPeer",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "eid",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "peer",
          "type": "bytes32"
        }
      ],
      "name": "PeerSet",
      "type": "event"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "srcEid",
              "type": "uint32"
            },
            {
              "internalType": "bytes32",
              "name": "sender",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "nonce",
              "type": "uint64"
            }
          ],
          "internalType": "struct Origin",
          "name": "origin",
          "type": "tuple"
        }
      ],
      "name": "allowInitializePath",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "collections",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "createCollection",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "curatorDelegate",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "attester",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "schemaId",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "attestationId",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "extraData",
          "type": "bytes"
        }
      ],
      "name": "didReceiveAttestation",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "attester",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "attestationId",
          "type": "uint64"
        },
        {
          "internalType": "contract IERC20",
          "name": "resolverFeeERC20Token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "resolverFeeERC20Amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "extraData",
          "type": "bytes"
        }
      ],
      "name": "didReceiveAttestation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "attester",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "attestationId",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "extraData",
          "type": "bytes"
        }
      ],
      "name": "didReceiveRevocation",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "attester",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "attestationId",
          "type": "uint64"
        },
        {
          "internalType": "contract IERC20",
          "name": "resolverFeeERC20Token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "resolverFeeERC20Amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "extraData",
          "type": "bytes"
        }
      ],
      "name": "didReceiveRevocation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "endpoint",
      "outputs": [
        {
          "internalType": "contract ILayerZeroEndpointV2",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "galleryAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "srcEid",
              "type": "uint32"
            },
            {
              "internalType": "bytes32",
              "name": "sender",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "nonce",
              "type": "uint64"
            }
          ],
          "internalType": "struct Origin",
          "name": "",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        }
      ],
      "name": "isComposeMsgSender",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lzEndpoint",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "srcEid",
              "type": "uint32"
            },
            {
              "internalType": "bytes32",
              "name": "sender",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "nonce",
              "type": "uint64"
            }
          ],
          "internalType": "struct Origin",
          "name": "_origin",
          "type": "tuple"
        },
        {
          "internalType": "bytes32",
          "name": "_guid",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "_executor",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_extraData",
          "type": "bytes"
        }
      ],
      "name": "lzReceive",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "nextNonce",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "nonce",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oAppVersion",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "senderVersion",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "receiverVersion",
          "type": "uint64"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "eid",
          "type": "uint32"
        }
      ],
      "name": "peers",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "peer",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_dstEid",
          "type": "uint32"
        },
        {
          "internalType": "string",
          "name": "_message",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "_options",
          "type": "bytes"
        },
        {
          "internalType": "bool",
          "name": "_payInLzToken",
          "type": "bool"
        }
      ],
      "name": "quote",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "nativeFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lzTokenFee",
              "type": "uint256"
            }
          ],
          "internalType": "struct MessagingFee",
          "name": "fee",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_dstEid",
          "type": "uint32"
        },
        {
          "internalType": "string",
          "name": "_message",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "_options",
          "type": "bytes"
        }
      ],
      "name": "send",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "guid",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "nonce",
              "type": "uint64"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "nativeFee",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "lzTokenFee",
                  "type": "uint256"
                }
              ],
              "internalType": "struct MessagingFee",
              "name": "fee",
              "type": "tuple"
            }
          ],
          "internalType": "struct MessagingReceipt",
          "name": "receipt",
          "type": "tuple"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_delegate",
          "type": "address"
        }
      ],
      "name": "setDelegate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_eid",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "_peer",
          "type": "bytes32"
        }
      ],
      "name": "setPeer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x518922583c054f3b2ac3a543bf2091b11837cd0bd21c9b47510dc37cd8a6a6f4",
  "receipt": {
    "to": null,
    "from": "0xaaB63b70Ad1fcFf67EB26963EB352C91945B01e2",
    "contractAddress": "0x22192e511ce6Fb2e1D998CEc8ddc5e86f11bb812",
    "transactionIndex": 1,
    "gasUsed": "3998166",
    "logsBloom": "0x
    "blockHash": "0x7c47475bc88347b40c1de81baaad5a747b148b2c2a5022757c1cfa8c1007a304",
    "transactionHash": "0x518922583c054f3b2ac3a543bf2091b11837cd0bd21c9b47510dc37cd8a6a6f4",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 5592953,
        "transactionHash": "0x518922583c054f3b2ac3a543bf2091b11837cd0bd21c9b47510dc37cd8a6a6f4",
        "address": "0x22192e511ce6Fb2e1D998CEc8ddc5e86f11bb812",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000aab63b70ad1fcff67eb26963eb352c91945b01e2"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x7c47475bc88347b40c1de81baaad5a747b148b2c2a5022757c1cfa8c1007a304"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 5592953,
        "transactionHash": "0x518922583c054f3b2ac3a543bf2091b11837cd0bd21c9b47510dc37cd8a6a6f4",
        "address": "0x145C041566B21Bec558B2A37F1a5Ff261aB55998",
        "topics": [
          "0x6ee10e9ed4d6ce9742703a498707862f4b00f1396a87195eb93267b3d7983981"
        ],
        "data": "0x00000000000000000000000022192e511ce6fb2e1d998cec8ddc5e86f11bb812000000000000000000000000aab63b70ad1fcff67eb26963eb352c91945b01e2",
        "logIndex": 1,
        "blockHash": "0x7c47475bc88347b40c1de81baaad5a747b148b2c2a5022757c1cfa8c1007a304"
      }
    ],
    "blockNumber": 5592953,
    "cumulativeGasUsed": "4041981",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x145C041566B21Bec558B2A37F1a5Ff261aB55998",
    "0xaaB63b70Ad1fcFf67EB26963EB352C91945B01e2"
  ],
  "numDeployments": 1,
  "solcInputHash": "f1092bf6b113ce2b0beedcd30504d7e4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_endpoint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_delegate\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidDelegate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidEndpointCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LzTokenUnavailable\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"}],\"name\":\"NoPeer\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"msgValue\",\"type\":\"uint256\"}],\"name\":\"NotEnoughNative\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"OnlyEndpoint\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"}],\"name\":\"OnlyPeer\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"peer\",\"type\":\"bytes32\"}],\"name\":\"PeerSet\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"srcEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"internalType\":\"struct Origin\",\"name\":\"origin\",\"type\":\"tuple\"}],\"name\":\"allowInitializePath\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"collections\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"createCollection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"curatorDelegate\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"attester\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"schemaId\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"attestationId\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"didReceiveAttestation\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"attester\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"attestationId\",\"type\":\"uint64\"},{\"internalType\":\"contract IERC20\",\"name\":\"resolverFeeERC20Token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"resolverFeeERC20Amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"didReceiveAttestation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"attester\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"attestationId\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"didReceiveRevocation\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"attester\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"attestationId\",\"type\":\"uint64\"},{\"internalType\":\"contract IERC20\",\"name\":\"resolverFeeERC20Token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"resolverFeeERC20Amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"didReceiveRevocation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endpoint\",\"outputs\":[{\"internalType\":\"contract ILayerZeroEndpointV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"galleryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"srcEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"internalType\":\"struct Origin\",\"name\":\"\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"isComposeMsgSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lzEndpoint\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"srcEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"internalType\":\"struct Origin\",\"name\":\"_origin\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"_guid\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_executor\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"lzReceive\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"nextNonce\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oAppVersion\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"senderVersion\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"receiverVersion\",\"type\":\"uint64\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"}],\"name\":\"peers\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"peer\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_dstEid\",\"type\":\"uint32\"},{\"internalType\":\"string\",\"name\":\"_message\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_options\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"_payInLzToken\",\"type\":\"bool\"}],\"name\":\"quote\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nativeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lzTokenFee\",\"type\":\"uint256\"}],\"internalType\":\"struct MessagingFee\",\"name\":\"fee\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_dstEid\",\"type\":\"uint32\"},{\"internalType\":\"string\",\"name\":\"_message\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_options\",\"type\":\"bytes\"}],\"name\":\"send\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"guid\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nativeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lzTokenFee\",\"type\":\"uint256\"}],\"internalType\":\"struct MessagingFee\",\"name\":\"fee\",\"type\":\"tuple\"}],\"internalType\":\"struct MessagingReceipt\",\"name\":\"receipt\",\"type\":\"tuple\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_delegate\",\"type\":\"address\"}],\"name\":\"setDelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_eid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"_peer\",\"type\":\"bytes32\"}],\"name\":\"setPeer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC-20 token failed.\"}]},\"kind\":\"dev\",\"methods\":{\"allowInitializePath((uint32,bytes32,uint64))\":{\"details\":\"This indicates to the endpoint that the OApp has enabled msgs for this particular path to be received.This defaults to assuming if a peer has been set, its initialized. Can be overridden by the OApp if there is other logic to determine this.\",\"params\":{\"origin\":\"The origin information containing the source endpoint and sender address.\"},\"returns\":{\"_0\":\"Whether the path has been initialized.\"}},\"isComposeMsgSender((uint32,bytes32,uint64),bytes,address)\":{\"details\":\"_origin The origin information containing the source endpoint and sender address.  - srcEid: The source chain endpoint ID.  - sender: The sender address on the src chain.  - nonce: The nonce of the message._message The lzReceive payload.Applications can optionally choose to implement separate composeMsg senders that are NOT the bridging layer.The default sender IS the OAppReceiver implementer.\",\"params\":{\"_sender\":\"The sender address.\"},\"returns\":{\"_0\":\"isSender Is a valid sender.\"}},\"lzReceive((uint32,bytes32,uint64),bytes32,bytes,address,bytes)\":{\"details\":\"Entry point for receiving messages or packets from the endpoint.Entry point for receiving msg/packet from the LayerZero endpoint.\",\"params\":{\"_executor\":\"The address of the executor for the received message.\",\"_extraData\":\"Additional arbitrary data provided by the corresponding executor.\",\"_guid\":\"The unique identifier for the received LayerZero message.\",\"_message\":\"The payload of the received message.\",\"_origin\":\"The origin information containing the source endpoint and sender address.  - srcEid: The source chain endpoint ID.  - sender: The sender address on the src chain.  - nonce: The nonce of the message.\"}},\"nextNonce(uint32,bytes32)\":{\"details\":\"_srcEid The source endpoint ID._sender The sender address.The path nonce starts from 1. If 0 is returned it means that there is NO nonce ordered enforcement.Is required by the off-chain executor to determine the OApp expects msg execution is ordered.This is also enforced by the OApp.By default this is NOT enabled. ie. nextNonce is hardcoded to return 0.\",\"returns\":{\"nonce\":\"The next nonce.\"}},\"oAppVersion()\":{\"returns\":{\"receiverVersion\":\"The version of the OAppReceiver.sol implementation.\",\"senderVersion\":\"The version of the OAppSender.sol implementation.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setDelegate(address)\":{\"details\":\"Only the owner/admin of the OApp can call this function.Provides the ability for a delegate to set configs, on behalf of the OApp, directly on the Endpoint contract.\",\"params\":{\"_delegate\":\"The address of the delegate to be set.\"}},\"setPeer(uint32,bytes32)\":{\"details\":\"Only the owner/admin of the OApp can call this function.Indicates that the peer is trusted to send LayerZero messages to this OApp.Set this to bytes32(0) to remove the peer address.Peer is a bytes32 to accommodate non-evm chains.\",\"params\":{\"_eid\":\"The endpoint ID.\",\"_peer\":\"The address of the peer to be associated with the corresponding endpoint.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"allowInitializePath((uint32,bytes32,uint64))\":{\"notice\":\"Checks if the path initialization is allowed based on the provided origin.\"},\"endpoint()\":{\"notice\":\"Retrieves the LayerZero endpoint associated with the OApp.\"},\"isComposeMsgSender((uint32,bytes32,uint64),bytes,address)\":{\"notice\":\"Indicates whether an address is an approved composeMsg sender to the Endpoint.\"},\"nextNonce(uint32,bytes32)\":{\"notice\":\"Retrieves the next nonce for a given source endpoint and sender address.\"},\"oAppVersion()\":{\"notice\":\"Retrieves the OApp version information.\"},\"peers(uint32)\":{\"notice\":\"Retrieves the peer (OApp) associated with a corresponding endpoint.\"},\"setDelegate(address)\":{\"notice\":\"Sets the delegate address for the OApp.\"},\"setPeer(uint32,bytes32)\":{\"notice\":\"Sets the peer address (OApp instance) for a corresponding endpoint.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Curator.sol\":\"Curator\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@ethsign/sign-protocol-evm/src/interfaces/ISP.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport { IVersionable } from \\\"./IVersionable.sol\\\";\\nimport { Schema } from \\\"../models/Schema.sol\\\";\\nimport { Attestation, OffchainAttestation } from \\\"../models/Attestation.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title Sign Protocol Interface\\n * @author Jack Xu @ EthSign\\n */\\ninterface ISP is IVersionable {\\n    event SchemaRegistered(uint64 schemaId);\\n    event AttestationMade(uint64 attestationId, string indexingKey);\\n    event AttestationRevoked(uint64 attestationId, string reason);\\n    event OffchainAttestationMade(string attestationId);\\n    event OffchainAttestationRevoked(string attestationId, string reason);\\n\\n    /**\\n     * @dev 0x9e87fac8\\n     */\\n    error Paused();\\n    /**\\n     * @dev 0x38f8c6c4\\n     */\\n    error SchemaNonexistent();\\n    /**\\n     * @dev 0x71984561\\n     */\\n    error SchemaWrongRegistrant();\\n    /**\\n     * @dev 0x8ac42f49\\n     */\\n    error AttestationIrrevocable();\\n    /**\\n     * @dev 0x54681a13\\n     */\\n    error AttestationNonexistent();\\n    /**\\n     * @dev 0xa65e02ed\\n     */\\n    error AttestationInvalidDuration();\\n    /**\\n     * @dev 0xd8c3da86\\n     */\\n    error AttestationAlreadyRevoked();\\n    /**\\n     * @dev 0xa9ad2007\\n     */\\n    error AttestationWrongAttester();\\n    /**\\n     * @dev 0xc83e3cdf\\n     */\\n    error OffchainAttestationExists();\\n    /**\\n     * @dev 0xa006519a\\n     */\\n    error OffchainAttestationNonexistent();\\n    /**\\n     * @dev 0xa0671d20\\n     */\\n    error OffchainAttestationAlreadyRevoked();\\n    /**\\n     * @dev 0xfdf4e6f9\\n     */\\n    error InvalidDelegateSignature();\\n    /**\\n     * @dev 0x5c34b9cc\\n     */\\n    error LegacySPRequired();\\n\\n    /**\\n     * @notice Registers a Schema.\\n     * @dev Emits `SchemaRegistered`.\\n     * @param schema See `Schema`.\\n     * @param delegateSignature An optional ECDSA delegateSignature if this is a delegated attestation. Use `\\\"\\\"` or `0x`\\n     * otherwise.\\n     * @return schemaId The assigned ID of the registered schema.\\n     */\\n    function register(Schema memory schema, bytes calldata delegateSignature) external returns (uint64 schemaId);\\n\\n    /**\\n     * @notice Makes an attestation.\\n     * @dev Emits `AttestationMade`.\\n     * @param attestation See `Attestation`.\\n     * @param indexingKey Used by the frontend to aid indexing.\\n     * @param delegateSignature An optional ECDSA delegateSignature if this is a delegated attestation. Use `\\\"\\\"` or `0x`\\n     * otherwise.\\n     * @param extraData This is forwarded to the resolver directly.\\n     * @return attestationId The assigned ID of the attestation.\\n     */\\n    function attest(\\n        Attestation calldata attestation,\\n        string calldata indexingKey,\\n        bytes calldata delegateSignature,\\n        bytes calldata extraData\\n    )\\n        external\\n        returns (uint64 attestationId);\\n\\n    /**\\n     * @notice Makes an attestation where the schema hook expects ETH payment.\\n     * @dev Emits `AttestationMade`.\\n     * @param attestation See `Attestation`.\\n     * @param resolverFeesETH Amount of funds to send to the hook.\\n     * @param indexingKey Used by the frontend to aid indexing.\\n     * @param delegateSignature An optional ECDSA delegateSignature if this is a delegated attestation. Use `\\\"\\\"` or `0x`\\n     * otherwise.\\n     * @param extraData This is forwarded to the resolver directly.\\n     * @return attestationId The assigned ID of the attestation.\\n     */\\n    function attest(\\n        Attestation calldata attestation,\\n        uint256 resolverFeesETH,\\n        string calldata indexingKey,\\n        bytes calldata delegateSignature,\\n        bytes calldata extraData\\n    )\\n        external\\n        payable\\n        returns (uint64 attestationId);\\n\\n    /**\\n     * @notice Makes an attestation where the schema hook expects ERC20 payment.\\n     * @dev Emits `AttestationMade`.\\n     * @param attestation See `Attestation`.\\n     * @param resolverFeesERC20Token ERC20 token address used for payment.\\n     * @param resolverFeesERC20Amount Amount of funds to send to the hook.\\n     * @param indexingKey Used by the frontend to aid indexing.\\n     * @param delegateSignature An optional ECDSA delegateSignature if this is a delegated attestation. Use `\\\"\\\"` or `0x`\\n     * otherwise.\\n     * @param extraData This is forwarded to the resolver directly.\\n     * @return attestationId The assigned ID of the attestation.\\n     */\\n    function attest(\\n        Attestation calldata attestation,\\n        IERC20 resolverFeesERC20Token,\\n        uint256 resolverFeesERC20Amount,\\n        string calldata indexingKey,\\n        bytes calldata delegateSignature,\\n        bytes calldata extraData\\n    )\\n        external\\n        returns (uint64 attestationId);\\n\\n    /**\\n     * @notice Timestamps an off-chain data ID.\\n     * @dev Emits `OffchainAttestationMade`.\\n     * @param offchainAttestationId The off-chain data ID.\\n     * @param delegateAttester An optional delegated attester that authorized the caller to attest on their behalf if\\n     * this is a delegated attestation. Use `address(0)` otherwise.\\n     * @param delegateSignature An optional ECDSA delegateSignature if this is a delegated attestation. Use `\\\"\\\"` or `0x`\\n     * otherwise. Use `\\\"\\\"` or `0x` otherwise.\\n     */\\n    function attestOffchain(\\n        string calldata offchainAttestationId,\\n        address delegateAttester,\\n        bytes calldata delegateSignature\\n    )\\n        external;\\n\\n    /**\\n     * @notice Revokes an existing revocable attestation.\\n     * @dev Emits `AttestationRevoked`. Must be called by the attester.\\n     * @param attestationId An existing attestation ID.\\n     * @param reason The revocation reason. This is only emitted as an event to save gas.\\n     * @param delegateSignature An optional ECDSA delegateSignature if this is a delegated revocation.\\n     * @param extraData This is forwarded to the resolver directly.\\n     */\\n    function revoke(\\n        uint64 attestationId,\\n        string calldata reason,\\n        bytes calldata delegateSignature,\\n        bytes calldata extraData\\n    )\\n        external;\\n\\n    /**\\n     * @notice Revokes an existing revocable attestation where the schema hook expects ERC20 payment.\\n     * @dev Emits `AttestationRevoked`. Must be called by the attester.\\n     * @param attestationId An existing attestation ID.\\n     * @param reason The revocation reason. This is only emitted as an event to save gas.\\n     * @param resolverFeesETH Amount of funds to send to the hook.\\n     * @param delegateSignature An optional ECDSA delegateSignature if this is a delegated revocation.\\n     * @param extraData This is forwarded to the resolver directly.\\n     */\\n    function revoke(\\n        uint64 attestationId,\\n        string calldata reason,\\n        uint256 resolverFeesETH,\\n        bytes calldata delegateSignature,\\n        bytes calldata extraData\\n    )\\n        external\\n        payable;\\n\\n    /**\\n     * @notice Revokes an existing revocable attestation where the schema hook expects ERC20 payment.\\n     * @dev Emits `AttestationRevoked`. Must be called by the attester.\\n     * @param attestationId An existing attestation ID.\\n     * @param reason The revocation reason. This is only emitted as an event to save gas.\\n     * @param resolverFeesERC20Token ERC20 token address used for payment.\\n     * @param resolverFeesERC20Amount Amount of funds to send to the hook.\\n     * @param delegateSignature An optional ECDSA delegateSignature if this is a delegated revocation.\\n     * @param extraData This is forwarded to the resolver directly.\\n     */\\n    function revoke(\\n        uint64 attestationId,\\n        string calldata reason,\\n        IERC20 resolverFeesERC20Token,\\n        uint256 resolverFeesERC20Amount,\\n        bytes calldata delegateSignature,\\n        bytes calldata extraData\\n    )\\n        external;\\n\\n    /**\\n     * @notice Revokes an existing offchain attestation.\\n     * @dev Emits `OffchainAttestationRevoked`. Must be called by the attester.\\n     * @param offchainAttestationId An existing attestation ID.\\n     * @param reason The revocation reason. This is only emitted as an event to save gas.\\n     * @param delegateSignature An optional ECDSA delegateSignature if this is a delegated revocation.\\n     */\\n    function revokeOffchain(\\n        string calldata offchainAttestationId,\\n        string calldata reason,\\n        bytes calldata delegateSignature\\n    )\\n        external;\\n\\n    /**\\n     * @notice Batch registers a Schema.\\n     */\\n    function registerBatch(\\n        Schema[] calldata schemas,\\n        bytes calldata delegateSignature\\n    )\\n        external\\n        returns (uint64[] calldata schemaIds);\\n\\n    /**\\n     * @notice Batch attests.\\n     */\\n    function attestBatch(\\n        Attestation[] calldata attestations,\\n        string[] calldata indexingKeys,\\n        bytes calldata delegateSignature,\\n        bytes calldata extraData\\n    )\\n        external\\n        returns (uint64[] calldata attestationIds);\\n\\n    /**\\n     * @notice Batch attests where the schema hook expects ETH payment.\\n     */\\n    function attestBatch(\\n        Attestation[] calldata attestations,\\n        uint256[] calldata resolverFeesETH,\\n        string[] calldata indexingKeys,\\n        bytes calldata delegateSignature,\\n        bytes calldata extraData\\n    )\\n        external\\n        payable\\n        returns (uint64[] calldata attestationIds);\\n\\n    /**\\n     * @notice Batch attests where the schema hook expects ERC20 payment.\\n     */\\n    function attestBatch(\\n        Attestation[] calldata attestations,\\n        IERC20[] calldata resolverFeesERC20Tokens,\\n        uint256[] calldata resolverFeesERC20Amount,\\n        string[] calldata indexingKeys,\\n        bytes calldata delegateSignature,\\n        bytes calldata extraData\\n    )\\n        external\\n        returns (uint64[] calldata attestationIds);\\n\\n    /**\\n     * @notice Batch timestamps off-chain data IDs.\\n     */\\n    function attestOffchainBatch(\\n        string[] calldata offchainAttestationIds,\\n        address delegateAttester,\\n        bytes calldata delegateSignature\\n    )\\n        external;\\n\\n    /**\\n     * @notice Batch revokes revocable on-chain attestations.\\n     */\\n    function revokeBatch(\\n        uint64[] calldata attestationIds,\\n        string[] calldata reasons,\\n        bytes calldata delegateSignature,\\n        bytes calldata extraData\\n    )\\n        external;\\n\\n    /**\\n     * @notice Batch revokes revocable on-chain attestations where the schema hook expects ETH payment.\\n     */\\n    function revokeBatch(\\n        uint64[] calldata attestationIds,\\n        string[] calldata reasons,\\n        uint256[] calldata resolverFeesETH,\\n        bytes calldata delegateSignature,\\n        bytes calldata extraData\\n    )\\n        external\\n        payable;\\n\\n    /**\\n     * @notice Batch revokes revocable on-chain attestations where the schema hook expects ERC20 payment.\\n     */\\n    function revokeBatch(\\n        uint64[] calldata attestationIds,\\n        string[] calldata reasons,\\n        IERC20[] calldata resolverFeesERC20Tokens,\\n        uint256[] calldata resolverFeesERC20Amount,\\n        bytes calldata delegateSignature,\\n        bytes calldata extraData\\n    )\\n        external;\\n\\n    /**\\n     * @notice Batch revokes off-chain attestations.\\n     */\\n    function revokeOffchainBatch(\\n        string[] calldata offchainAttestationIds,\\n        string[] calldata reasons,\\n        bytes calldata delegateSignature\\n    )\\n        external;\\n\\n    /**\\n     * @notice Returns the specified `Schema`.\\n     */\\n    function getSchema(uint64 schemaId) external view returns (Schema calldata);\\n\\n    /**\\n     * @notice Returns the specified `Attestation`.\\n     */\\n    function getAttestation(uint64 attestationId) external view returns (Attestation calldata);\\n\\n    /**\\n     * @notice Returns the specified `OffchainAttestation`.\\n     */\\n    function getOffchainAttestation(string calldata offchainAttestationId)\\n        external\\n        view\\n        returns (OffchainAttestation calldata);\\n\\n    /**\\n     * @notice Returns the hash that will be used to authorize a delegated registration.\\n     */\\n    function getDelegatedRegisterHash(Schema memory schema) external pure returns (bytes32);\\n\\n    /**\\n     * @notice Returns the hash that will be used to authorize a delegated batch registration.\\n     */\\n    function getDelegatedRegisterBatchHash(Schema[] memory schemas) external pure returns (bytes32);\\n\\n    /**\\n     * @notice Returns the hash that will be used to authorize a delegated attestation.\\n     */\\n    function getDelegatedAttestHash(Attestation calldata attestation) external pure returns (bytes32);\\n\\n    /**\\n     * @notice Returns the hash that will be used to authorize a delegated batch attestation.\\n     */\\n    function getDelegatedAttestBatchHash(Attestation[] calldata attestations) external pure returns (bytes32);\\n\\n    /**\\n     * @notice Returns the hash that will be used to authorize a delegated offchain attestation.\\n     */\\n    function getDelegatedOffchainAttestHash(string calldata offchainAttestationId) external pure returns (bytes32);\\n\\n    /**\\n     * @notice Returns the hash that will be used to authorize a delegated batch offchain attestation.\\n     */\\n    function getDelegatedOffchainAttestBatchHash(string[] calldata offchainAttestationIds)\\n        external\\n        pure\\n        returns (bytes32);\\n\\n    /**\\n     * @notice Returns the hash that will be used to authorize a delegated revocation.\\n     */\\n    function getDelegatedRevokeHash(uint64 attestationId, string memory reason) external pure returns (bytes32);\\n\\n    /**\\n     * @notice Returns the hash that will be used to authorize a delegated batch revocation.\\n     */\\n    function getDelegatedRevokeBatchHash(\\n        uint64[] memory attestationIds,\\n        string[] memory reasons\\n    )\\n        external\\n        pure\\n        returns (bytes32);\\n\\n    /**\\n     * @notice Returns the hash that will be used to authorize a delegated offchain revocation.\\n     */\\n    function getDelegatedOffchainRevokeHash(\\n        string memory offchainAttestationId,\\n        string memory reason\\n    )\\n        external\\n        pure\\n        returns (bytes32);\\n\\n    /**\\n     * @notice Returns the hash that will be used to authorize a delegated batch offchain revocation.\\n     */\\n    function getDelegatedOffchainRevokeBatchHash(\\n        string[] memory offchainAttestationIds,\\n        string[] memory reasons\\n    )\\n        external\\n        pure\\n        returns (bytes32);\\n\\n    /**\\n     * @notice Returns the current schema counter. This is incremented for each `Schema` registered.\\n     */\\n    function schemaCounter() external view returns (uint64);\\n\\n    /**\\n     * @notice Returns the current on-chain attestation counter. This is incremented for each `Attestation` made.\\n     */\\n    function attestationCounter() external view returns (uint64);\\n}\\n\",\"keccak256\":\"0xd5ddbb7cc6af2ee4c11d6c5dac739fc6254d84e13167bc054eb4477244490756\",\"license\":\"MIT\"},\"@ethsign/sign-protocol-evm/src/interfaces/ISPHook.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title SIGN Attestation Protocol Resolver Interface\\n * @author Jack Xu @ EthSign\\n */\\ninterface ISPHook {\\n    function didReceiveAttestation(\\n        address attester,\\n        uint64 schemaId,\\n        uint64 attestationId,\\n        bytes calldata extraData\\n    )\\n        external\\n        payable;\\n\\n    function didReceiveAttestation(\\n        address attester,\\n        uint64 schemaId,\\n        uint64 attestationId,\\n        IERC20 resolverFeeERC20Token,\\n        uint256 resolverFeeERC20Amount,\\n        bytes calldata extraData\\n    )\\n        external;\\n\\n    function didReceiveRevocation(\\n        address attester,\\n        uint64 schemaId,\\n        uint64 attestationId,\\n        bytes calldata extraData\\n    )\\n        external\\n        payable;\\n\\n    function didReceiveRevocation(\\n        address attester,\\n        uint64 schemaId,\\n        uint64 attestationId,\\n        IERC20 resolverFeeERC20Token,\\n        uint256 resolverFeeERC20Amount,\\n        bytes calldata extraData\\n    )\\n        external;\\n}\\n\",\"keccak256\":\"0xa42159d34c4b8fa91507efacad81c14106f466efdc63b81a7d566dc0d2e736f4\",\"license\":\"MIT\"},\"@ethsign/sign-protocol-evm/src/interfaces/IVersionable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title IVersionable\\n * @author Jack Xu @ EthSign\\n * @dev This interface helps contracts to keep track of their versioning for upgrade compatibility checks.\\n */\\ninterface IVersionable {\\n    function version() external pure returns (string memory);\\n}\\n\",\"keccak256\":\"0xbcf1955aa8423f4f77a46a988a7cd41a46ae92af42aa4546cfebdc2a92916129\",\"license\":\"MIT\"},\"@ethsign/sign-protocol-evm/src/models/Attestation.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport { DataLocation } from \\\"./DataLocation.sol\\\";\\n\\n/**\\n * @title Attestation\\n * @author Jack Xu @ EthSign\\n * @notice This struct represents an on-chain attestation record. This record is not deleted after revocation.\\n *\\n * `schemaId`: The `Schema` that this Attestation is based on. It must exist.\\n * `linkedAttestationId`: Useful if the current Attestation references a previous Attestation. It can either be 0 or an\\n * existing attestation ID.\\n * `attestTimestamp`: When the attestation was made. This is automatically populated by `_attest(...)`.\\n * `revokeTimestamp`: When the attestation was revoked. This is automatically populated by `_revoke(...)`.\\n * `attester`: The attester. At this time, the attester must be the caller of `attest()`.\\n * `validUntil`: The expiration timestamp of the Attestation. Must respect `Schema.maxValidFor`. 0 indicates no\\n * expiration date.\\n * `dataLocation`: Where `Attestation.data` is stored. See `DataLocation.DataLocation`.\\n * `revoked`: If the Attestation has been revoked. It is possible to make a revoked Attestation.\\n * `recipients`: The intended ABI-encoded recipients of this Attestation. This is of type `bytes` to support non-EVM\\n * repicients.\\n * `data`: The raw data of the Attestation based on `Schema.schema`. There is no enforcement here, however. Recommended\\n * to use `abi.encode`.\\n */\\nstruct Attestation {\\n    uint64 schemaId;\\n    uint64 linkedAttestationId;\\n    uint64 attestTimestamp;\\n    uint64 revokeTimestamp;\\n    address attester;\\n    uint64 validUntil;\\n    DataLocation dataLocation;\\n    bool revoked;\\n    bytes[] recipients;\\n    bytes data;\\n}\\n\\n/**\\n * @title OffchainAttestation\\n * @author Jack Xu @ EthSign\\n * @notice This struct represents an off-chain attestation record. This record is not deleted after revocation.\\n *\\n * `attester`: The attester. At this time, the attester must be the caller of `attestOffchain()`.\\n * `timestamp`: The `block.timestamp` of the function call.\\n */\\nstruct OffchainAttestation {\\n    address attester;\\n    uint64 timestamp;\\n}\\n\",\"keccak256\":\"0x8e2a182141d06bfdcce1325d70e8dd307f7d6b3d7b6fafcedc2dbabeb99fa30f\",\"license\":\"MIT\"},\"@ethsign/sign-protocol-evm/src/models/DataLocation.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title DataLocation\\n * @author Jack Xu @ EthSign\\n * @notice This enum indicates where `Schema.data` and `Attestation.data` are stored.\\n */\\nenum DataLocation {\\n    ONCHAIN,\\n    ARWEAVE,\\n    IPFS,\\n    CUSTOM\\n}\\n\",\"keccak256\":\"0x14f64929317cae8ae822a0dd2c20315ac141f10fa255cd2b13a0a4962385ec10\",\"license\":\"MIT\"},\"@ethsign/sign-protocol-evm/src/models/Schema.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport { ISPHook } from \\\"../interfaces/ISPHook.sol\\\";\\nimport { DataLocation } from \\\"./DataLocation.sol\\\";\\n\\n/**\\n * @title Schema\\n * @author Jack Xu @ EthSign\\n * @notice This struct represents an on-chain Schema that Attestations can conform to.\\n *\\n * `registrant`: The address that registered this schema.\\n * `revocable`: Whether Attestations that adopt this Schema can be revoked.\\n * `dataLocation`: Where `Schema.data` is stored. See `DataLocation.DataLocation`.\\n * `maxValidFor`: The maximum number of seconds that an Attestation can remain valid. 0 means Attestations can be valid\\n * forever. This is enforced through `Attestation.validUntil`.\\n * `hook`: The `ISPHook` that is called at the end of every function. 0 means there is no hook set. See\\n * `ISPHook`.\\n * `timestamp`: When the schema was registered. This is automatically populated by `_register(...)`.\\n * `data`: The raw schema that `Attestation.data` should follow. Since there is no way to enforce this, it is a `string`\\n * for easy readability.\\n */\\nstruct Schema {\\n    address registrant;\\n    bool revocable;\\n    DataLocation dataLocation;\\n    uint64 maxValidFor;\\n    ISPHook hook;\\n    uint64 timestamp;\\n    string data;\\n}\\n\",\"keccak256\":\"0xcf3bd964790fdc7f72bacc86380b307e58bf15fa5f7332852d4969fe0db58216\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpointV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nimport { IMessageLibManager } from \\\"./IMessageLibManager.sol\\\";\\nimport { IMessagingComposer } from \\\"./IMessagingComposer.sol\\\";\\nimport { IMessagingChannel } from \\\"./IMessagingChannel.sol\\\";\\nimport { IMessagingContext } from \\\"./IMessagingContext.sol\\\";\\n\\nstruct MessagingParams {\\n    uint32 dstEid;\\n    bytes32 receiver;\\n    bytes message;\\n    bytes options;\\n    bool payInLzToken;\\n}\\n\\nstruct MessagingReceipt {\\n    bytes32 guid;\\n    uint64 nonce;\\n    MessagingFee fee;\\n}\\n\\nstruct MessagingFee {\\n    uint256 nativeFee;\\n    uint256 lzTokenFee;\\n}\\n\\nstruct Origin {\\n    uint32 srcEid;\\n    bytes32 sender;\\n    uint64 nonce;\\n}\\n\\ninterface ILayerZeroEndpointV2 is IMessageLibManager, IMessagingComposer, IMessagingChannel, IMessagingContext {\\n    event PacketSent(bytes encodedPayload, bytes options, address sendLibrary);\\n\\n    event PacketVerified(Origin origin, address receiver, bytes32 payloadHash);\\n\\n    event PacketDelivered(Origin origin, address receiver);\\n\\n    event LzReceiveAlert(\\n        address indexed receiver,\\n        address indexed executor,\\n        Origin origin,\\n        bytes32 guid,\\n        uint256 gas,\\n        uint256 value,\\n        bytes message,\\n        bytes extraData,\\n        bytes reason\\n    );\\n\\n    event LzTokenSet(address token);\\n\\n    event DelegateSet(address sender, address delegate);\\n\\n    function quote(MessagingParams calldata _params, address _sender) external view returns (MessagingFee memory);\\n\\n    function send(\\n        MessagingParams calldata _params,\\n        address _refundAddress\\n    ) external payable returns (MessagingReceipt memory);\\n\\n    function verify(Origin calldata _origin, address _receiver, bytes32 _payloadHash) external;\\n\\n    function verifiable(Origin calldata _origin, address _receiver) external view returns (bool);\\n\\n    function initializable(Origin calldata _origin, address _receiver) external view returns (bool);\\n\\n    function lzReceive(\\n        Origin calldata _origin,\\n        address _receiver,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        bytes calldata _extraData\\n    ) external payable;\\n\\n    // oapp can burn messages partially by calling this function with its own business logic if messages are verified in order\\n    function clear(address _oapp, Origin calldata _origin, bytes32 _guid, bytes calldata _message) external;\\n\\n    function setLzToken(address _lzToken) external;\\n\\n    function lzToken() external view returns (address);\\n\\n    function nativeToken() external view returns (address);\\n\\n    function setDelegate(address _delegate) external;\\n}\\n\",\"keccak256\":\"0xf7f941bee89ea6369950fe54e8ac476ae6478b958b20fc0e8a83e8ff1364eac3\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nimport { Origin } from \\\"./ILayerZeroEndpointV2.sol\\\";\\n\\ninterface ILayerZeroReceiver {\\n    function allowInitializePath(Origin calldata _origin) external view returns (bool);\\n\\n    function nextNonce(uint32 _eid, bytes32 _sender) external view returns (uint64);\\n\\n    function lzReceive(\\n        Origin calldata _origin,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        address _executor,\\n        bytes calldata _extraData\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x9641abba8d53b08bb517d1b74801dd15ea7b84d77a6719085bd96c8ea94e3ca0\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessageLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nimport { IERC165 } from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\nimport { SetConfigParam } from \\\"./IMessageLibManager.sol\\\";\\n\\nenum MessageLibType {\\n    Send,\\n    Receive,\\n    SendAndReceive\\n}\\n\\ninterface IMessageLib is IERC165 {\\n    function setConfig(address _oapp, SetConfigParam[] calldata _config) external;\\n\\n    function getConfig(uint32 _eid, address _oapp, uint32 _configType) external view returns (bytes memory config);\\n\\n    function isSupportedEid(uint32 _eid) external view returns (bool);\\n\\n    // message libs of same major version are compatible\\n    function version() external view returns (uint64 major, uint8 minor, uint8 endpointVersion);\\n\\n    function messageLibType() external view returns (MessageLibType);\\n}\\n\",\"keccak256\":\"0x5cf5f24751b4e3ea1c9c5ded07cedfdfd62566b6daaffcc0144733859c9dba0c\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessageLibManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nstruct SetConfigParam {\\n    uint32 eid;\\n    uint32 configType;\\n    bytes config;\\n}\\n\\ninterface IMessageLibManager {\\n    struct Timeout {\\n        address lib;\\n        uint256 expiry;\\n    }\\n\\n    event LibraryRegistered(address newLib);\\n    event DefaultSendLibrarySet(uint32 eid, address newLib);\\n    event DefaultReceiveLibrarySet(uint32 eid, address newLib);\\n    event DefaultReceiveLibraryTimeoutSet(uint32 eid, address oldLib, uint256 expiry);\\n    event SendLibrarySet(address sender, uint32 eid, address newLib);\\n    event ReceiveLibrarySet(address receiver, uint32 eid, address newLib);\\n    event ReceiveLibraryTimeoutSet(address receiver, uint32 eid, address oldLib, uint256 timeout);\\n\\n    function registerLibrary(address _lib) external;\\n\\n    function isRegisteredLibrary(address _lib) external view returns (bool);\\n\\n    function getRegisteredLibraries() external view returns (address[] memory);\\n\\n    function setDefaultSendLibrary(uint32 _eid, address _newLib) external;\\n\\n    function defaultSendLibrary(uint32 _eid) external view returns (address);\\n\\n    function setDefaultReceiveLibrary(uint32 _eid, address _newLib, uint256 _gracePeriod) external;\\n\\n    function defaultReceiveLibrary(uint32 _eid) external view returns (address);\\n\\n    function setDefaultReceiveLibraryTimeout(uint32 _eid, address _lib, uint256 _expiry) external;\\n\\n    function defaultReceiveLibraryTimeout(uint32 _eid) external view returns (address lib, uint256 expiry);\\n\\n    function isSupportedEid(uint32 _eid) external view returns (bool);\\n\\n    function isValidReceiveLibrary(address _receiver, uint32 _eid, address _lib) external view returns (bool);\\n\\n    /// ------------------- OApp interfaces -------------------\\n    function setSendLibrary(address _oapp, uint32 _eid, address _newLib) external;\\n\\n    function getSendLibrary(address _sender, uint32 _eid) external view returns (address lib);\\n\\n    function isDefaultSendLibrary(address _sender, uint32 _eid) external view returns (bool);\\n\\n    function setReceiveLibrary(address _oapp, uint32 _eid, address _newLib, uint256 _gracePeriod) external;\\n\\n    function getReceiveLibrary(address _receiver, uint32 _eid) external view returns (address lib, bool isDefault);\\n\\n    function setReceiveLibraryTimeout(address _oapp, uint32 _eid, address _lib, uint256 _expiry) external;\\n\\n    function receiveLibraryTimeout(address _receiver, uint32 _eid) external view returns (address lib, uint256 expiry);\\n\\n    function setConfig(address _oapp, address _lib, SetConfigParam[] calldata _params) external;\\n\\n    function getConfig(\\n        address _oapp,\\n        address _lib,\\n        uint32 _eid,\\n        uint32 _configType\\n    ) external view returns (bytes memory config);\\n}\\n\",\"keccak256\":\"0x919b37133adff4dc528e3061deb2789c3149971b530c61e556fb3d09ab315dfc\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingChannel.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMessagingChannel {\\n    event InboundNonceSkipped(uint32 srcEid, bytes32 sender, address receiver, uint64 nonce);\\n    event PacketNilified(uint32 srcEid, bytes32 sender, address receiver, uint64 nonce, bytes32 payloadHash);\\n    event PacketBurnt(uint32 srcEid, bytes32 sender, address receiver, uint64 nonce, bytes32 payloadHash);\\n\\n    function eid() external view returns (uint32);\\n\\n    // this is an emergency function if a message cannot be verified for some reasons\\n    // required to provide _nextNonce to avoid race condition\\n    function skip(address _oapp, uint32 _srcEid, bytes32 _sender, uint64 _nonce) external;\\n\\n    function nilify(address _oapp, uint32 _srcEid, bytes32 _sender, uint64 _nonce, bytes32 _payloadHash) external;\\n\\n    function burn(address _oapp, uint32 _srcEid, bytes32 _sender, uint64 _nonce, bytes32 _payloadHash) external;\\n\\n    function nextGuid(address _sender, uint32 _dstEid, bytes32 _receiver) external view returns (bytes32);\\n\\n    function inboundNonce(address _receiver, uint32 _srcEid, bytes32 _sender) external view returns (uint64);\\n\\n    function outboundNonce(address _sender, uint32 _dstEid, bytes32 _receiver) external view returns (uint64);\\n\\n    function inboundPayloadHash(\\n        address _receiver,\\n        uint32 _srcEid,\\n        bytes32 _sender,\\n        uint64 _nonce\\n    ) external view returns (bytes32);\\n\\n    function lazyInboundNonce(address _receiver, uint32 _srcEid, bytes32 _sender) external view returns (uint64);\\n}\\n\",\"keccak256\":\"0x0878f64dffebf58c4165569416372f40860fab546b88cd926eba0d5cb6d8d972\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingComposer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMessagingComposer {\\n    event ComposeSent(address from, address to, bytes32 guid, uint16 index, bytes message);\\n    event ComposeDelivered(address from, address to, bytes32 guid, uint16 index);\\n    event LzComposeAlert(\\n        address indexed from,\\n        address indexed to,\\n        address indexed executor,\\n        bytes32 guid,\\n        uint16 index,\\n        uint256 gas,\\n        uint256 value,\\n        bytes message,\\n        bytes extraData,\\n        bytes reason\\n    );\\n\\n    function composeQueue(\\n        address _from,\\n        address _to,\\n        bytes32 _guid,\\n        uint16 _index\\n    ) external view returns (bytes32 messageHash);\\n\\n    function sendCompose(address _to, bytes32 _guid, uint16 _index, bytes calldata _message) external;\\n\\n    function lzCompose(\\n        address _from,\\n        address _to,\\n        bytes32 _guid,\\n        uint16 _index,\\n        bytes calldata _message,\\n        bytes calldata _extraData\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x85bc7090134529ec474866dc4bb1c48692d518c756eb0a961c82574829c51901\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingContext.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMessagingContext {\\n    function isSendingMessage() external view returns (bool);\\n\\n    function getSendContext() external view returns (uint32 dstEid, address sender);\\n}\\n\",\"keccak256\":\"0xff0c546c2813dae3e440882f46b377375f7461b0714efd80bd3f0c6e5cb8da4e\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ISendLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nimport { MessagingFee } from \\\"./ILayerZeroEndpointV2.sol\\\";\\nimport { IMessageLib } from \\\"./IMessageLib.sol\\\";\\n\\nstruct Packet {\\n    uint64 nonce;\\n    uint32 srcEid;\\n    address sender;\\n    uint32 dstEid;\\n    bytes32 receiver;\\n    bytes32 guid;\\n    bytes message;\\n}\\n\\ninterface ISendLib is IMessageLib {\\n    function send(\\n        Packet calldata _packet,\\n        bytes calldata _options,\\n        bool _payInLzToken\\n    ) external returns (MessagingFee memory, bytes memory encodedPacket);\\n\\n    function quote(\\n        Packet calldata _packet,\\n        bytes calldata _options,\\n        bool _payInLzToken\\n    ) external view returns (MessagingFee memory);\\n\\n    function setTreasury(address _treasury) external;\\n\\n    function withdrawFee(address _to, uint256 _amount) external;\\n\\n    function withdrawLzTokenFee(address _lzToken, address _to, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0xf1c07bc61e7b1dce195ed12d50f87980fbf2d63cac1326fd28287f55fe0ba625\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/libs/AddressCast.sol\":{\"content\":\"// SPDX-License-Identifier: LZBL-1.2\\n\\npragma solidity ^0.8.20;\\n\\nlibrary AddressCast {\\n    error AddressCast_InvalidSizeForAddress();\\n    error AddressCast_InvalidAddress();\\n\\n    function toBytes32(bytes calldata _addressBytes) internal pure returns (bytes32 result) {\\n        if (_addressBytes.length > 32) revert AddressCast_InvalidAddress();\\n        result = bytes32(_addressBytes);\\n        unchecked {\\n            uint256 offset = 32 - _addressBytes.length;\\n            result = result >> (offset * 8);\\n        }\\n    }\\n\\n    function toBytes32(address _address) internal pure returns (bytes32 result) {\\n        result = bytes32(uint256(uint160(_address)));\\n    }\\n\\n    function toBytes(bytes32 _addressBytes32, uint256 _size) internal pure returns (bytes memory result) {\\n        if (_size == 0 || _size > 32) revert AddressCast_InvalidSizeForAddress();\\n        result = new bytes(_size);\\n        unchecked {\\n            uint256 offset = 256 - _size * 8;\\n            assembly {\\n                mstore(add(result, 32), shl(offset, _addressBytes32))\\n            }\\n        }\\n    }\\n\\n    function toAddress(bytes32 _addressBytes32) internal pure returns (address result) {\\n        result = address(uint160(uint256(_addressBytes32)));\\n    }\\n\\n    function toAddress(bytes calldata _addressBytes) internal pure returns (address result) {\\n        if (_addressBytes.length != 20) revert AddressCast_InvalidAddress();\\n        result = address(bytes20(_addressBytes));\\n    }\\n}\\n\",\"keccak256\":\"0x2ebbcaaab3554edcd41b581f1a72ac1806afbfb8047d0d47ff098f9af30d6deb\",\"license\":\"LZBL-1.2\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/messagelib/libs/PacketV1Codec.sol\":{\"content\":\"// SPDX-License-Identifier: LZBL-1.2\\n\\npragma solidity ^0.8.20;\\n\\nimport { Packet } from \\\"../../interfaces/ISendLib.sol\\\";\\nimport { AddressCast } from \\\"../../libs/AddressCast.sol\\\";\\n\\nlibrary PacketV1Codec {\\n    using AddressCast for address;\\n    using AddressCast for bytes32;\\n\\n    uint8 internal constant PACKET_VERSION = 1;\\n\\n    // header (version + nonce + path)\\n    // version\\n    uint256 private constant PACKET_VERSION_OFFSET = 0;\\n    //    nonce\\n    uint256 private constant NONCE_OFFSET = 1;\\n    //    path\\n    uint256 private constant SRC_EID_OFFSET = 9;\\n    uint256 private constant SENDER_OFFSET = 13;\\n    uint256 private constant DST_EID_OFFSET = 45;\\n    uint256 private constant RECEIVER_OFFSET = 49;\\n    // payload (guid + message)\\n    uint256 private constant GUID_OFFSET = 81; // keccak256(nonce + path)\\n    uint256 private constant MESSAGE_OFFSET = 113;\\n\\n    function encode(Packet memory _packet) internal pure returns (bytes memory encodedPacket) {\\n        encodedPacket = abi.encodePacked(\\n            PACKET_VERSION,\\n            _packet.nonce,\\n            _packet.srcEid,\\n            _packet.sender.toBytes32(),\\n            _packet.dstEid,\\n            _packet.receiver,\\n            _packet.guid,\\n            _packet.message\\n        );\\n    }\\n\\n    function encodePacketHeader(Packet memory _packet) internal pure returns (bytes memory) {\\n        return\\n            abi.encodePacked(\\n                PACKET_VERSION,\\n                _packet.nonce,\\n                _packet.srcEid,\\n                _packet.sender.toBytes32(),\\n                _packet.dstEid,\\n                _packet.receiver\\n            );\\n    }\\n\\n    function encodePayload(Packet memory _packet) internal pure returns (bytes memory) {\\n        return abi.encodePacked(_packet.guid, _packet.message);\\n    }\\n\\n    function header(bytes calldata _packet) internal pure returns (bytes calldata) {\\n        return _packet[0:GUID_OFFSET];\\n    }\\n\\n    function version(bytes calldata _packet) internal pure returns (uint8) {\\n        return uint8(bytes1(_packet[PACKET_VERSION_OFFSET:NONCE_OFFSET]));\\n    }\\n\\n    function nonce(bytes calldata _packet) internal pure returns (uint64) {\\n        return uint64(bytes8(_packet[NONCE_OFFSET:SRC_EID_OFFSET]));\\n    }\\n\\n    function srcEid(bytes calldata _packet) internal pure returns (uint32) {\\n        return uint32(bytes4(_packet[SRC_EID_OFFSET:SENDER_OFFSET]));\\n    }\\n\\n    function sender(bytes calldata _packet) internal pure returns (bytes32) {\\n        return bytes32(_packet[SENDER_OFFSET:DST_EID_OFFSET]);\\n    }\\n\\n    function senderAddressB20(bytes calldata _packet) internal pure returns (address) {\\n        return sender(_packet).toAddress();\\n    }\\n\\n    function dstEid(bytes calldata _packet) internal pure returns (uint32) {\\n        return uint32(bytes4(_packet[DST_EID_OFFSET:RECEIVER_OFFSET]));\\n    }\\n\\n    function receiver(bytes calldata _packet) internal pure returns (bytes32) {\\n        return bytes32(_packet[RECEIVER_OFFSET:GUID_OFFSET]);\\n    }\\n\\n    function receiverB20(bytes calldata _packet) internal pure returns (address) {\\n        return receiver(_packet).toAddress();\\n    }\\n\\n    function guid(bytes calldata _packet) internal pure returns (bytes32) {\\n        return bytes32(_packet[GUID_OFFSET:MESSAGE_OFFSET]);\\n    }\\n\\n    function message(bytes calldata _packet) internal pure returns (bytes calldata) {\\n        return bytes(_packet[MESSAGE_OFFSET:]);\\n    }\\n\\n    function payload(bytes calldata _packet) internal pure returns (bytes calldata) {\\n        return bytes(_packet[GUID_OFFSET:]);\\n    }\\n\\n    function payloadHash(bytes calldata _packet) internal pure returns (bytes32) {\\n        return keccak256(payload(_packet));\\n    }\\n}\\n\",\"keccak256\":\"0xc84cf1bf785977fe1fbe7566eef902c2db68d0e163813ebe6c34921754802680\",\"license\":\"LZBL-1.2\"},\"@layerzerolabs/oapp-evm/contracts/oapp/OApp.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\n// @dev Import the 'MessagingFee' and 'MessagingReceipt' so it's exposed to OApp implementers\\n// solhint-disable-next-line no-unused-import\\nimport { OAppSender, MessagingFee, MessagingReceipt } from \\\"./OAppSender.sol\\\";\\n// @dev Import the 'Origin' so it's exposed to OApp implementers\\n// solhint-disable-next-line no-unused-import\\nimport { OAppReceiver, Origin } from \\\"./OAppReceiver.sol\\\";\\nimport { OAppCore } from \\\"./OAppCore.sol\\\";\\n\\n/**\\n * @title OApp\\n * @dev Abstract contract serving as the base for OApp implementation, combining OAppSender and OAppReceiver functionality.\\n */\\nabstract contract OApp is OAppSender, OAppReceiver {\\n    /**\\n     * @dev Constructor to initialize the OApp with the provided endpoint and owner.\\n     * @param _endpoint The address of the LOCAL LayerZero endpoint.\\n     * @param _delegate The delegate capable of making OApp configurations inside of the endpoint.\\n     */\\n    constructor(address _endpoint, address _delegate) OAppCore(_endpoint, _delegate) {}\\n\\n    /**\\n     * @notice Retrieves the OApp version information.\\n     * @return senderVersion The version of the OAppSender.sol implementation.\\n     * @return receiverVersion The version of the OAppReceiver.sol implementation.\\n     */\\n    function oAppVersion()\\n        public\\n        pure\\n        virtual\\n        override(OAppSender, OAppReceiver)\\n        returns (uint64 senderVersion, uint64 receiverVersion)\\n    {\\n        return (SENDER_VERSION, RECEIVER_VERSION);\\n    }\\n}\\n\",\"keccak256\":\"0xac362c4c291fad2f1511a968424b2e78a5ad502d1c867bd31da04be742aca8c5\",\"license\":\"MIT\"},\"@layerzerolabs/oapp-evm/contracts/oapp/OAppCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { IOAppCore, ILayerZeroEndpointV2 } from \\\"./interfaces/IOAppCore.sol\\\";\\n\\n/**\\n * @title OAppCore\\n * @dev Abstract contract implementing the IOAppCore interface with basic OApp configurations.\\n */\\nabstract contract OAppCore is IOAppCore, Ownable {\\n    // The LayerZero endpoint associated with the given OApp\\n    ILayerZeroEndpointV2 public immutable endpoint;\\n\\n    // Mapping to store peers associated with corresponding endpoints\\n    mapping(uint32 eid => bytes32 peer) public peers;\\n\\n    /**\\n     * @dev Constructor to initialize the OAppCore with the provided endpoint and delegate.\\n     * @param _endpoint The address of the LOCAL Layer Zero endpoint.\\n     * @param _delegate The delegate capable of making OApp configurations inside of the endpoint.\\n     *\\n     * @dev The delegate typically should be set as the owner of the contract.\\n     */\\n    constructor(address _endpoint, address _delegate) {\\n        endpoint = ILayerZeroEndpointV2(_endpoint);\\n\\n        if (_delegate == address(0)) revert InvalidDelegate();\\n        endpoint.setDelegate(_delegate);\\n    }\\n\\n    /**\\n     * @notice Sets the peer address (OApp instance) for a corresponding endpoint.\\n     * @param _eid The endpoint ID.\\n     * @param _peer The address of the peer to be associated with the corresponding endpoint.\\n     *\\n     * @dev Only the owner/admin of the OApp can call this function.\\n     * @dev Indicates that the peer is trusted to send LayerZero messages to this OApp.\\n     * @dev Set this to bytes32(0) to remove the peer address.\\n     * @dev Peer is a bytes32 to accommodate non-evm chains.\\n     */\\n    function setPeer(uint32 _eid, bytes32 _peer) public virtual onlyOwner {\\n        _setPeer(_eid, _peer);\\n    }\\n\\n    /**\\n     * @notice Sets the peer address (OApp instance) for a corresponding endpoint.\\n     * @param _eid The endpoint ID.\\n     * @param _peer The address of the peer to be associated with the corresponding endpoint.\\n     *\\n     * @dev Indicates that the peer is trusted to send LayerZero messages to this OApp.\\n     * @dev Set this to bytes32(0) to remove the peer address.\\n     * @dev Peer is a bytes32 to accommodate non-evm chains.\\n     */\\n    function _setPeer(uint32 _eid, bytes32 _peer) internal virtual {\\n        peers[_eid] = _peer;\\n        emit PeerSet(_eid, _peer);\\n    }\\n\\n    /**\\n     * @notice Internal function to get the peer address associated with a specific endpoint; reverts if NOT set.\\n     * ie. the peer is set to bytes32(0).\\n     * @param _eid The endpoint ID.\\n     * @return peer The address of the peer associated with the specified endpoint.\\n     */\\n    function _getPeerOrRevert(uint32 _eid) internal view virtual returns (bytes32) {\\n        bytes32 peer = peers[_eid];\\n        if (peer == bytes32(0)) revert NoPeer(_eid);\\n        return peer;\\n    }\\n\\n    /**\\n     * @notice Sets the delegate address for the OApp.\\n     * @param _delegate The address of the delegate to be set.\\n     *\\n     * @dev Only the owner/admin of the OApp can call this function.\\n     * @dev Provides the ability for a delegate to set configs, on behalf of the OApp, directly on the Endpoint contract.\\n     */\\n    function setDelegate(address _delegate) public onlyOwner {\\n        endpoint.setDelegate(_delegate);\\n    }\\n}\\n\",\"keccak256\":\"0x13a9c2d1d2c1f086b8624f2e84c4a4702212daae36f701d92bb915b535cbe4cc\",\"license\":\"MIT\"},\"@layerzerolabs/oapp-evm/contracts/oapp/OAppReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport { IOAppReceiver, Origin } from \\\"./interfaces/IOAppReceiver.sol\\\";\\nimport { OAppCore } from \\\"./OAppCore.sol\\\";\\n\\n/**\\n * @title OAppReceiver\\n * @dev Abstract contract implementing the ILayerZeroReceiver interface and extending OAppCore for OApp receivers.\\n */\\nabstract contract OAppReceiver is IOAppReceiver, OAppCore {\\n    // Custom error message for when the caller is not the registered endpoint/\\n    error OnlyEndpoint(address addr);\\n\\n    // @dev The version of the OAppReceiver implementation.\\n    // @dev Version is bumped when changes are made to this contract.\\n    uint64 internal constant RECEIVER_VERSION = 2;\\n\\n    /**\\n     * @notice Retrieves the OApp version information.\\n     * @return senderVersion The version of the OAppSender.sol contract.\\n     * @return receiverVersion The version of the OAppReceiver.sol contract.\\n     *\\n     * @dev Providing 0 as the default for OAppSender version. Indicates that the OAppSender is not implemented.\\n     * ie. this is a RECEIVE only OApp.\\n     * @dev If the OApp uses both OAppSender and OAppReceiver, then this needs to be override returning the correct versions.\\n     */\\n    function oAppVersion() public view virtual returns (uint64 senderVersion, uint64 receiverVersion) {\\n        return (0, RECEIVER_VERSION);\\n    }\\n\\n    /**\\n     * @notice Indicates whether an address is an approved composeMsg sender to the Endpoint.\\n     * @dev _origin The origin information containing the source endpoint and sender address.\\n     *  - srcEid: The source chain endpoint ID.\\n     *  - sender: The sender address on the src chain.\\n     *  - nonce: The nonce of the message.\\n     * @dev _message The lzReceive payload.\\n     * @param _sender The sender address.\\n     * @return isSender Is a valid sender.\\n     *\\n     * @dev Applications can optionally choose to implement separate composeMsg senders that are NOT the bridging layer.\\n     * @dev The default sender IS the OAppReceiver implementer.\\n     */\\n    function isComposeMsgSender(\\n        Origin calldata /*_origin*/,\\n        bytes calldata /*_message*/,\\n        address _sender\\n    ) public view virtual returns (bool) {\\n        return _sender == address(this);\\n    }\\n\\n    /**\\n     * @notice Checks if the path initialization is allowed based on the provided origin.\\n     * @param origin The origin information containing the source endpoint and sender address.\\n     * @return Whether the path has been initialized.\\n     *\\n     * @dev This indicates to the endpoint that the OApp has enabled msgs for this particular path to be received.\\n     * @dev This defaults to assuming if a peer has been set, its initialized.\\n     * Can be overridden by the OApp if there is other logic to determine this.\\n     */\\n    function allowInitializePath(Origin calldata origin) public view virtual returns (bool) {\\n        return peers[origin.srcEid] == origin.sender;\\n    }\\n\\n    /**\\n     * @notice Retrieves the next nonce for a given source endpoint and sender address.\\n     * @dev _srcEid The source endpoint ID.\\n     * @dev _sender The sender address.\\n     * @return nonce The next nonce.\\n     *\\n     * @dev The path nonce starts from 1. If 0 is returned it means that there is NO nonce ordered enforcement.\\n     * @dev Is required by the off-chain executor to determine the OApp expects msg execution is ordered.\\n     * @dev This is also enforced by the OApp.\\n     * @dev By default this is NOT enabled. ie. nextNonce is hardcoded to return 0.\\n     */\\n    function nextNonce(uint32 /*_srcEid*/, bytes32 /*_sender*/) public view virtual returns (uint64 nonce) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev Entry point for receiving messages or packets from the endpoint.\\n     * @param _origin The origin information containing the source endpoint and sender address.\\n     *  - srcEid: The source chain endpoint ID.\\n     *  - sender: The sender address on the src chain.\\n     *  - nonce: The nonce of the message.\\n     * @param _guid The unique identifier for the received LayerZero message.\\n     * @param _message The payload of the received message.\\n     * @param _executor The address of the executor for the received message.\\n     * @param _extraData Additional arbitrary data provided by the corresponding executor.\\n     *\\n     * @dev Entry point for receiving msg/packet from the LayerZero endpoint.\\n     */\\n    function lzReceive(\\n        Origin calldata _origin,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        address _executor,\\n        bytes calldata _extraData\\n    ) public payable virtual {\\n        // Ensures that only the endpoint can attempt to lzReceive() messages to this OApp.\\n        if (address(endpoint) != msg.sender) revert OnlyEndpoint(msg.sender);\\n\\n        // Ensure that the sender matches the expected peer for the source endpoint.\\n        if (_getPeerOrRevert(_origin.srcEid) != _origin.sender) revert OnlyPeer(_origin.srcEid, _origin.sender);\\n\\n        // Call the internal OApp implementation of lzReceive.\\n        _lzReceive(_origin, _guid, _message, _executor, _extraData);\\n    }\\n\\n    /**\\n     * @dev Internal function to implement lzReceive logic without needing to copy the basic parameter validation.\\n     */\\n    function _lzReceive(\\n        Origin calldata _origin,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        address _executor,\\n        bytes calldata _extraData\\n    ) internal virtual;\\n}\\n\",\"keccak256\":\"0x0174e9f1ec4cefe4b5adc26c392269c699b9ff75965364e5b7264426a462c70b\",\"license\":\"MIT\"},\"@layerzerolabs/oapp-evm/contracts/oapp/OAppSender.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport { SafeERC20, IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { MessagingParams, MessagingFee, MessagingReceipt } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpointV2.sol\\\";\\nimport { OAppCore } from \\\"./OAppCore.sol\\\";\\n\\n/**\\n * @title OAppSender\\n * @dev Abstract contract implementing the OAppSender functionality for sending messages to a LayerZero endpoint.\\n */\\nabstract contract OAppSender is OAppCore {\\n    using SafeERC20 for IERC20;\\n\\n    // Custom error messages\\n    error NotEnoughNative(uint256 msgValue);\\n    error LzTokenUnavailable();\\n\\n    // @dev The version of the OAppSender implementation.\\n    // @dev Version is bumped when changes are made to this contract.\\n    uint64 internal constant SENDER_VERSION = 1;\\n\\n    /**\\n     * @notice Retrieves the OApp version information.\\n     * @return senderVersion The version of the OAppSender.sol contract.\\n     * @return receiverVersion The version of the OAppReceiver.sol contract.\\n     *\\n     * @dev Providing 0 as the default for OAppReceiver version. Indicates that the OAppReceiver is not implemented.\\n     * ie. this is a SEND only OApp.\\n     * @dev If the OApp uses both OAppSender and OAppReceiver, then this needs to be override returning the correct versions\\n     */\\n    function oAppVersion() public view virtual returns (uint64 senderVersion, uint64 receiverVersion) {\\n        return (SENDER_VERSION, 0);\\n    }\\n\\n    /**\\n     * @dev Internal function to interact with the LayerZero EndpointV2.quote() for fee calculation.\\n     * @param _dstEid The destination endpoint ID.\\n     * @param _message The message payload.\\n     * @param _options Additional options for the message.\\n     * @param _payInLzToken Flag indicating whether to pay the fee in LZ tokens.\\n     * @return fee The calculated MessagingFee for the message.\\n     *      - nativeFee: The native fee for the message.\\n     *      - lzTokenFee: The LZ token fee for the message.\\n     */\\n    function _quote(\\n        uint32 _dstEid,\\n        bytes memory _message,\\n        bytes memory _options,\\n        bool _payInLzToken\\n    ) internal view virtual returns (MessagingFee memory fee) {\\n        return\\n            endpoint.quote(\\n                MessagingParams(_dstEid, _getPeerOrRevert(_dstEid), _message, _options, _payInLzToken),\\n                address(this)\\n            );\\n    }\\n\\n    /**\\n     * @dev Internal function to interact with the LayerZero EndpointV2.send() for sending a message.\\n     * @param _dstEid The destination endpoint ID.\\n     * @param _message The message payload.\\n     * @param _options Additional options for the message.\\n     * @param _fee The calculated LayerZero fee for the message.\\n     *      - nativeFee: The native fee.\\n     *      - lzTokenFee: The lzToken fee.\\n     * @param _refundAddress The address to receive any excess fee values sent to the endpoint.\\n     * @return receipt The receipt for the sent message.\\n     *      - guid: The unique identifier for the sent message.\\n     *      - nonce: The nonce of the sent message.\\n     *      - fee: The LayerZero fee incurred for the message.\\n     */\\n    function _lzSend(\\n        uint32 _dstEid,\\n        bytes memory _message,\\n        bytes memory _options,\\n        MessagingFee memory _fee,\\n        address _refundAddress\\n    ) internal virtual returns (MessagingReceipt memory receipt) {\\n        // @dev Push corresponding fees to the endpoint, any excess is sent back to the _refundAddress from the endpoint.\\n        uint256 messageValue = _payNative(_fee.nativeFee);\\n        if (_fee.lzTokenFee > 0) _payLzToken(_fee.lzTokenFee);\\n\\n        return\\n            // solhint-disable-next-line check-send-result\\n            endpoint.send{ value: messageValue }(\\n                MessagingParams(_dstEid, _getPeerOrRevert(_dstEid), _message, _options, _fee.lzTokenFee > 0),\\n                _refundAddress\\n            );\\n    }\\n\\n    /**\\n     * @dev Internal function to pay the native fee associated with the message.\\n     * @param _nativeFee The native fee to be paid.\\n     * @return nativeFee The amount of native currency paid.\\n     *\\n     * @dev If the OApp needs to initiate MULTIPLE LayerZero messages in a single transaction,\\n     * this will need to be overridden because msg.value would contain multiple lzFees.\\n     * @dev Should be overridden in the event the LayerZero endpoint requires a different native currency.\\n     * @dev Some EVMs use an ERC20 as a method for paying transactions/gasFees.\\n     * @dev The endpoint is EITHER/OR, ie. it will NOT support both types of native payment at a time.\\n     */\\n    function _payNative(uint256 _nativeFee) internal virtual returns (uint256 nativeFee) {\\n        if (msg.value != _nativeFee) revert NotEnoughNative(msg.value);\\n        return _nativeFee;\\n    }\\n\\n    /**\\n     * @dev Internal function to pay the LZ token fee associated with the message.\\n     * @param _lzTokenFee The LZ token fee to be paid.\\n     *\\n     * @dev If the caller is trying to pay in the specified lzToken, then the lzTokenFee is passed to the endpoint.\\n     * @dev Any excess sent, is passed back to the specified _refundAddress in the _lzSend().\\n     */\\n    function _payLzToken(uint256 _lzTokenFee) internal virtual {\\n        // @dev Cannot cache the token because it is not immutable in the endpoint.\\n        address lzToken = endpoint.lzToken();\\n        if (lzToken == address(0)) revert LzTokenUnavailable();\\n\\n        // Pay LZ token fee by sending tokens to the endpoint.\\n        IERC20(lzToken).safeTransferFrom(msg.sender, address(endpoint), _lzTokenFee);\\n    }\\n}\\n\",\"keccak256\":\"0x518cf4adca601923ed4baa6619846a253ea32b8d8775f8bc1faa3dfac7f67c20\",\"license\":\"MIT\"},\"@layerzerolabs/oapp-evm/contracts/oapp/interfaces/IOAppCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport { ILayerZeroEndpointV2 } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpointV2.sol\\\";\\n\\n/**\\n * @title IOAppCore\\n */\\ninterface IOAppCore {\\n    // Custom error messages\\n    error OnlyPeer(uint32 eid, bytes32 sender);\\n    error NoPeer(uint32 eid);\\n    error InvalidEndpointCall();\\n    error InvalidDelegate();\\n\\n    // Event emitted when a peer (OApp) is set for a corresponding endpoint\\n    event PeerSet(uint32 eid, bytes32 peer);\\n\\n    /**\\n     * @notice Retrieves the OApp version information.\\n     * @return senderVersion The version of the OAppSender.sol contract.\\n     * @return receiverVersion The version of the OAppReceiver.sol contract.\\n     */\\n    function oAppVersion() external view returns (uint64 senderVersion, uint64 receiverVersion);\\n\\n    /**\\n     * @notice Retrieves the LayerZero endpoint associated with the OApp.\\n     * @return iEndpoint The LayerZero endpoint as an interface.\\n     */\\n    function endpoint() external view returns (ILayerZeroEndpointV2 iEndpoint);\\n\\n    /**\\n     * @notice Retrieves the peer (OApp) associated with a corresponding endpoint.\\n     * @param _eid The endpoint ID.\\n     * @return peer The peer address (OApp instance) associated with the corresponding endpoint.\\n     */\\n    function peers(uint32 _eid) external view returns (bytes32 peer);\\n\\n    /**\\n     * @notice Sets the peer address (OApp instance) for a corresponding endpoint.\\n     * @param _eid The endpoint ID.\\n     * @param _peer The address of the peer to be associated with the corresponding endpoint.\\n     */\\n    function setPeer(uint32 _eid, bytes32 _peer) external;\\n\\n    /**\\n     * @notice Sets the delegate address for the OApp Core.\\n     * @param _delegate The address of the delegate to be set.\\n     */\\n    function setDelegate(address _delegate) external;\\n}\\n\",\"keccak256\":\"0x40e49f2de74506e1da5dcaed53a39853f691647f4ceb0fccc8f49a68d3f47c58\",\"license\":\"MIT\"},\"@layerzerolabs/oapp-evm/contracts/oapp/interfaces/IOAppMsgInspector.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title IOAppMsgInspector\\n * @dev Interface for the OApp Message Inspector, allowing examination of message and options contents.\\n */\\ninterface IOAppMsgInspector {\\n    // Custom error message for inspection failure\\n    error InspectionFailed(bytes message, bytes options);\\n\\n    /**\\n     * @notice Allows the inspector to examine LayerZero message contents and optionally throw a revert if invalid.\\n     * @param _message The message payload to be inspected.\\n     * @param _options Additional options or parameters for inspection.\\n     * @return valid A boolean indicating whether the inspection passed (true) or failed (false).\\n     *\\n     * @dev Optionally done as a revert, OR use the boolean provided to handle the failure.\\n     */\\n    function inspect(bytes calldata _message, bytes calldata _options) external view returns (bool valid);\\n}\\n\",\"keccak256\":\"0x339654e699043c400cad92de209aa23855ce10211c31cf4114042cc5224d3b7c\",\"license\":\"MIT\"},\"@layerzerolabs/oapp-evm/contracts/oapp/interfaces/IOAppOptionsType3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Struct representing enforced option parameters.\\n */\\nstruct EnforcedOptionParam {\\n    uint32 eid; // Endpoint ID\\n    uint16 msgType; // Message Type\\n    bytes options; // Additional options\\n}\\n\\n/**\\n * @title IOAppOptionsType3\\n * @dev Interface for the OApp with Type 3 Options, allowing the setting and combining of enforced options.\\n */\\ninterface IOAppOptionsType3 {\\n    // Custom error message for invalid options\\n    error InvalidOptions(bytes options);\\n\\n    // Event emitted when enforced options are set\\n    event EnforcedOptionSet(EnforcedOptionParam[] _enforcedOptions);\\n\\n    /**\\n     * @notice Sets enforced options for specific endpoint and message type combinations.\\n     * @param _enforcedOptions An array of EnforcedOptionParam structures specifying enforced options.\\n     */\\n    function setEnforcedOptions(EnforcedOptionParam[] calldata _enforcedOptions) external;\\n\\n    /**\\n     * @notice Combines options for a given endpoint and message type.\\n     * @param _eid The endpoint ID.\\n     * @param _msgType The OApp message type.\\n     * @param _extraOptions Additional options passed by the caller.\\n     * @return options The combination of caller specified options AND enforced options.\\n     */\\n    function combineOptions(\\n        uint32 _eid,\\n        uint16 _msgType,\\n        bytes calldata _extraOptions\\n    ) external view returns (bytes memory options);\\n}\\n\",\"keccak256\":\"0x9fc08a51e9d7c9c710c4eb26f84fe77228305ad7da63fa486ff24ebf2f3bc461\",\"license\":\"MIT\"},\"@layerzerolabs/oapp-evm/contracts/oapp/interfaces/IOAppReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport { ILayerZeroReceiver, Origin } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroReceiver.sol\\\";\\n\\ninterface IOAppReceiver is ILayerZeroReceiver {\\n    /**\\n     * @notice Indicates whether an address is an approved composeMsg sender to the Endpoint.\\n     * @param _origin The origin information containing the source endpoint and sender address.\\n     *  - srcEid: The source chain endpoint ID.\\n     *  - sender: The sender address on the src chain.\\n     *  - nonce: The nonce of the message.\\n     * @param _message The lzReceive payload.\\n     * @param _sender The sender address.\\n     * @return isSender Is a valid sender.\\n     *\\n     * @dev Applications can optionally choose to implement a separate composeMsg sender that is NOT the bridging layer.\\n     * @dev The default sender IS the OAppReceiver implementer.\\n     */\\n    function isComposeMsgSender(\\n        Origin calldata _origin,\\n        bytes calldata _message,\\n        address _sender\\n    ) external view returns (bool isSender);\\n}\\n\",\"keccak256\":\"0xd26135185e19b3732746d4a9e2923e896f28dec8664bab161faea2ee26fcdc3d\",\"license\":\"MIT\"},\"@layerzerolabs/oapp-evm/contracts/oapp/libs/OAppOptionsType3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { IOAppOptionsType3, EnforcedOptionParam } from \\\"../interfaces/IOAppOptionsType3.sol\\\";\\n\\n/**\\n * @title OAppOptionsType3\\n * @dev Abstract contract implementing the IOAppOptionsType3 interface with type 3 options.\\n */\\nabstract contract OAppOptionsType3 is IOAppOptionsType3, Ownable {\\n    uint16 internal constant OPTION_TYPE_3 = 3;\\n\\n    // @dev The \\\"msgType\\\" should be defined in the child contract.\\n    mapping(uint32 eid => mapping(uint16 msgType => bytes enforcedOption)) public enforcedOptions;\\n\\n    /**\\n     * @dev Sets the enforced options for specific endpoint and message type combinations.\\n     * @param _enforcedOptions An array of EnforcedOptionParam structures specifying enforced options.\\n     *\\n     * @dev Only the owner/admin of the OApp can call this function.\\n     * @dev Provides a way for the OApp to enforce things like paying for PreCrime, AND/OR minimum dst lzReceive gas amounts etc.\\n     * @dev These enforced options can vary as the potential options/execution on the remote may differ as per the msgType.\\n     * eg. Amount of lzReceive() gas necessary to deliver a lzCompose() message adds overhead you dont want to pay\\n     * if you are only making a standard LayerZero message ie. lzReceive() WITHOUT sendCompose().\\n     */\\n    function setEnforcedOptions(EnforcedOptionParam[] calldata _enforcedOptions) public virtual onlyOwner {\\n        _setEnforcedOptions(_enforcedOptions);\\n    }\\n\\n    /**\\n     * @dev Sets the enforced options for specific endpoint and message type combinations.\\n     * @param _enforcedOptions An array of EnforcedOptionParam structures specifying enforced options.\\n     *\\n     * @dev Provides a way for the OApp to enforce things like paying for PreCrime, AND/OR minimum dst lzReceive gas amounts etc.\\n     * @dev These enforced options can vary as the potential options/execution on the remote may differ as per the msgType.\\n     * eg. Amount of lzReceive() gas necessary to deliver a lzCompose() message adds overhead you dont want to pay\\n     * if you are only making a standard LayerZero message ie. lzReceive() WITHOUT sendCompose().\\n     */\\n    function _setEnforcedOptions(EnforcedOptionParam[] memory _enforcedOptions) internal virtual {\\n        for (uint256 i = 0; i < _enforcedOptions.length; i++) {\\n            // @dev Enforced options are only available for optionType 3, as type 1 and 2 dont support combining.\\n            _assertOptionsType3(_enforcedOptions[i].options);\\n            enforcedOptions[_enforcedOptions[i].eid][_enforcedOptions[i].msgType] = _enforcedOptions[i].options;\\n        }\\n\\n        emit EnforcedOptionSet(_enforcedOptions);\\n    }\\n\\n    /**\\n     * @notice Combines options for a given endpoint and message type.\\n     * @param _eid The endpoint ID.\\n     * @param _msgType The OAPP message type.\\n     * @param _extraOptions Additional options passed by the caller.\\n     * @return options The combination of caller specified options AND enforced options.\\n     *\\n     * @dev If there is an enforced lzReceive option:\\n     * - {gasLimit: 200k, msg.value: 1 ether} AND a caller supplies a lzReceive option: {gasLimit: 100k, msg.value: 0.5 ether}\\n     * - The resulting options will be {gasLimit: 300k, msg.value: 1.5 ether} when the message is executed on the remote lzReceive() function.\\n     * @dev This presence of duplicated options is handled off-chain in the verifier/executor.\\n     */\\n    function combineOptions(\\n        uint32 _eid,\\n        uint16 _msgType,\\n        bytes calldata _extraOptions\\n    ) public view virtual returns (bytes memory) {\\n        bytes memory enforced = enforcedOptions[_eid][_msgType];\\n\\n        // No enforced options, pass whatever the caller supplied, even if it's empty or legacy type 1/2 options.\\n        if (enforced.length == 0) return _extraOptions;\\n\\n        // No caller options, return enforced\\n        if (_extraOptions.length == 0) return enforced;\\n\\n        // @dev If caller provided _extraOptions, must be type 3 as its the ONLY type that can be combined.\\n        if (_extraOptions.length >= 2) {\\n            _assertOptionsType3(_extraOptions);\\n            // @dev Remove the first 2 bytes containing the type from the _extraOptions and combine with enforced.\\n            return bytes.concat(enforced, _extraOptions[2:]);\\n        }\\n\\n        // No valid set of options was found.\\n        revert InvalidOptions(_extraOptions);\\n    }\\n\\n    /**\\n     * @dev Internal function to assert that options are of type 3.\\n     * @param _options The options to be checked.\\n     */\\n    function _assertOptionsType3(bytes memory _options) internal pure virtual {\\n        uint16 optionsType;\\n        assembly {\\n            optionsType := mload(add(_options, 2))\\n        }\\n        if (optionsType != OPTION_TYPE_3) revert InvalidOptions(_options);\\n    }\\n}\\n\",\"keccak256\":\"0x5275636cd47e660a2fdf6c7fe9d41ff3cc866b785cc8a9d88c1b8ca983509f01\",\"license\":\"MIT\"},\"@layerzerolabs/oapp-evm/contracts/precrime/OAppPreCrimeSimulator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { IPreCrime } from \\\"./interfaces/IPreCrime.sol\\\";\\nimport { IOAppPreCrimeSimulator, InboundPacket, Origin } from \\\"./interfaces/IOAppPreCrimeSimulator.sol\\\";\\n\\n/**\\n * @title OAppPreCrimeSimulator\\n * @dev Abstract contract serving as the base for preCrime simulation functionality in an OApp.\\n */\\nabstract contract OAppPreCrimeSimulator is IOAppPreCrimeSimulator, Ownable {\\n    // The address of the preCrime implementation.\\n    address public preCrime;\\n\\n    /**\\n     * @dev Retrieves the address of the OApp contract.\\n     * @return The address of the OApp contract.\\n     *\\n     * @dev The simulator contract is the base contract for the OApp by default.\\n     * @dev If the simulator is a separate contract, override this function.\\n     */\\n    function oApp() external view virtual returns (address) {\\n        return address(this);\\n    }\\n\\n    /**\\n     * @dev Sets the preCrime contract address.\\n     * @param _preCrime The address of the preCrime contract.\\n     */\\n    function setPreCrime(address _preCrime) public virtual onlyOwner {\\n        preCrime = _preCrime;\\n        emit PreCrimeSet(_preCrime);\\n    }\\n\\n    /**\\n     * @dev Interface for pre-crime simulations. Always reverts at the end with the simulation results.\\n     * @param _packets An array of InboundPacket objects representing received packets to be delivered.\\n     *\\n     * @dev WARNING: MUST revert at the end with the simulation results.\\n     * @dev Gives the preCrime implementation the ability to mock sending packets to the lzReceive function,\\n     * WITHOUT actually executing them.\\n     */\\n    function lzReceiveAndRevert(InboundPacket[] calldata _packets) public payable virtual {\\n        for (uint256 i = 0; i < _packets.length; i++) {\\n            InboundPacket calldata packet = _packets[i];\\n\\n            // Ignore packets that are not from trusted peers.\\n            if (!isPeer(packet.origin.srcEid, packet.origin.sender)) continue;\\n\\n            // @dev Because a verifier is calling this function, it doesnt have access to executor params:\\n            //  - address _executor\\n            //  - bytes calldata _extraData\\n            // preCrime will NOT work for OApps that rely on these two parameters inside of their _lzReceive().\\n            // They are instead stubbed to default values, address(0) and bytes(\\\"\\\")\\n            // @dev Calling this.lzReceiveSimulate removes ability for assembly return 0 callstack exit,\\n            // which would cause the revert to be ignored.\\n            this.lzReceiveSimulate{ value: packet.value }(\\n                packet.origin,\\n                packet.guid,\\n                packet.message,\\n                packet.executor,\\n                packet.extraData\\n            );\\n        }\\n\\n        // @dev Revert with the simulation results. msg.sender must implement IPreCrime.buildSimulationResult().\\n        revert SimulationResult(IPreCrime(msg.sender).buildSimulationResult());\\n    }\\n\\n    /**\\n     * @dev Is effectively an internal function because msg.sender must be address(this).\\n     * Allows resetting the call stack for 'internal' calls.\\n     * @param _origin The origin information containing the source endpoint and sender address.\\n     *  - srcEid: The source chain endpoint ID.\\n     *  - sender: The sender address on the src chain.\\n     *  - nonce: The nonce of the message.\\n     * @param _guid The unique identifier of the packet.\\n     * @param _message The message payload of the packet.\\n     * @param _executor The executor address for the packet.\\n     * @param _extraData Additional data for the packet.\\n     */\\n    function lzReceiveSimulate(\\n        Origin calldata _origin,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        address _executor,\\n        bytes calldata _extraData\\n    ) external payable virtual {\\n        // @dev Ensure ONLY can be called 'internally'.\\n        if (msg.sender != address(this)) revert OnlySelf();\\n        _lzReceiveSimulate(_origin, _guid, _message, _executor, _extraData);\\n    }\\n\\n    /**\\n     * @dev Internal function to handle the OAppPreCrimeSimulator simulated receive.\\n     * @param _origin The origin information.\\n     *  - srcEid: The source chain endpoint ID.\\n     *  - sender: The sender address from the src chain.\\n     *  - nonce: The nonce of the LayerZero message.\\n     * @param _guid The GUID of the LayerZero message.\\n     * @param _message The LayerZero message.\\n     * @param _executor The address of the off-chain executor.\\n     * @param _extraData Arbitrary data passed by the msg executor.\\n     *\\n     * @dev Enables the preCrime simulator to mock sending lzReceive() messages,\\n     * routes the msg down from the OAppPreCrimeSimulator, and back up to the OAppReceiver.\\n     */\\n    function _lzReceiveSimulate(\\n        Origin calldata _origin,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        address _executor,\\n        bytes calldata _extraData\\n    ) internal virtual;\\n\\n    /**\\n     * @dev checks if the specified peer is considered 'trusted' by the OApp.\\n     * @param _eid The endpoint Id to check.\\n     * @param _peer The peer to check.\\n     * @return Whether the peer passed is considered 'trusted' by the OApp.\\n     */\\n    function isPeer(uint32 _eid, bytes32 _peer) public view virtual returns (bool);\\n}\\n\",\"keccak256\":\"0x205a0abfd8b3c9af2740769f251381b84999b8e9347f3cd50de3ef8290a17750\",\"license\":\"MIT\"},\"@layerzerolabs/oapp-evm/contracts/precrime/interfaces/IOAppPreCrimeSimulator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\n// @dev Import the Origin so it's exposed to OAppPreCrimeSimulator implementers.\\n// solhint-disable-next-line no-unused-import\\nimport { InboundPacket, Origin } from \\\"../libs/Packet.sol\\\";\\n\\n/**\\n * @title IOAppPreCrimeSimulator Interface\\n * @dev Interface for the preCrime simulation functionality in an OApp.\\n */\\ninterface IOAppPreCrimeSimulator {\\n    // @dev simulation result used in PreCrime implementation\\n    error SimulationResult(bytes result);\\n    error OnlySelf();\\n\\n    /**\\n     * @dev Emitted when the preCrime contract address is set.\\n     * @param preCrimeAddress The address of the preCrime contract.\\n     */\\n    event PreCrimeSet(address preCrimeAddress);\\n\\n    /**\\n     * @dev Retrieves the address of the preCrime contract implementation.\\n     * @return The address of the preCrime contract.\\n     */\\n    function preCrime() external view returns (address);\\n\\n    /**\\n     * @dev Retrieves the address of the OApp contract.\\n     * @return The address of the OApp contract.\\n     */\\n    function oApp() external view returns (address);\\n\\n    /**\\n     * @dev Sets the preCrime contract address.\\n     * @param _preCrime The address of the preCrime contract.\\n     */\\n    function setPreCrime(address _preCrime) external;\\n\\n    /**\\n     * @dev Mocks receiving a packet, then reverts with a series of data to infer the state/result.\\n     * @param _packets An array of LayerZero InboundPacket objects representing received packets.\\n     */\\n    function lzReceiveAndRevert(InboundPacket[] calldata _packets) external payable;\\n\\n    /**\\n     * @dev checks if the specified peer is considered 'trusted' by the OApp.\\n     * @param _eid The endpoint Id to check.\\n     * @param _peer The peer to check.\\n     * @return Whether the peer passed is considered 'trusted' by the OApp.\\n     */\\n    function isPeer(uint32 _eid, bytes32 _peer) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5d24db150949ea8e6437178e65a942e8c8b7f332e5daf32750f56b23b35b5bb2\",\"license\":\"MIT\"},\"@layerzerolabs/oapp-evm/contracts/precrime/interfaces/IPreCrime.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\nstruct PreCrimePeer {\\n    uint32 eid;\\n    bytes32 preCrime;\\n    bytes32 oApp;\\n}\\n\\n// TODO not done yet\\ninterface IPreCrime {\\n    error OnlyOffChain();\\n\\n    // for simulate()\\n    error PacketOversize(uint256 max, uint256 actual);\\n    error PacketUnsorted();\\n    error SimulationFailed(bytes reason);\\n\\n    // for preCrime()\\n    error SimulationResultNotFound(uint32 eid);\\n    error InvalidSimulationResult(uint32 eid, bytes reason);\\n    error CrimeFound(bytes crime);\\n\\n    function getConfig(bytes[] calldata _packets, uint256[] calldata _packetMsgValues) external returns (bytes memory);\\n\\n    function simulate(\\n        bytes[] calldata _packets,\\n        uint256[] calldata _packetMsgValues\\n    ) external payable returns (bytes memory);\\n\\n    function buildSimulationResult() external view returns (bytes memory);\\n\\n    function preCrime(\\n        bytes[] calldata _packets,\\n        uint256[] calldata _packetMsgValues,\\n        bytes[] calldata _simulations\\n    ) external;\\n\\n    function version() external view returns (uint64 major, uint8 minor);\\n}\\n\",\"keccak256\":\"0xc8d869f27ef8ceb2e13fdf6a70682fd4dee3f90c4924eb8e125bc1e66cb6af84\",\"license\":\"MIT\"},\"@layerzerolabs/oapp-evm/contracts/precrime/libs/Packet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport { Origin } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpointV2.sol\\\";\\nimport { PacketV1Codec } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/messagelib/libs/PacketV1Codec.sol\\\";\\n\\n/**\\n * @title InboundPacket\\n * @dev Structure representing an inbound packet received by the contract.\\n */\\nstruct InboundPacket {\\n    Origin origin; // Origin information of the packet.\\n    uint32 dstEid; // Destination endpointId of the packet.\\n    address receiver; // Receiver address for the packet.\\n    bytes32 guid; // Unique identifier of the packet.\\n    uint256 value; // msg.value of the packet.\\n    address executor; // Executor address for the packet.\\n    bytes message; // Message payload of the packet.\\n    bytes extraData; // Additional arbitrary data for the packet.\\n}\\n\\n/**\\n * @title PacketDecoder\\n * @dev Library for decoding LayerZero packets.\\n */\\nlibrary PacketDecoder {\\n    using PacketV1Codec for bytes;\\n\\n    /**\\n     * @dev Decode an inbound packet from the given packet data.\\n     * @param _packet The packet data to decode.\\n     * @return packet An InboundPacket struct representing the decoded packet.\\n     */\\n    function decode(bytes calldata _packet) internal pure returns (InboundPacket memory packet) {\\n        packet.origin = Origin(_packet.srcEid(), _packet.sender(), _packet.nonce());\\n        packet.dstEid = _packet.dstEid();\\n        packet.receiver = _packet.receiverB20();\\n        packet.guid = _packet.guid();\\n        packet.message = _packet.message();\\n    }\\n\\n    /**\\n     * @dev Decode multiple inbound packets from the given packet data and associated message values.\\n     * @param _packets An array of packet data to decode.\\n     * @param _packetMsgValues An array of associated message values for each packet.\\n     * @return packets An array of InboundPacket structs representing the decoded packets.\\n     */\\n    function decode(\\n        bytes[] calldata _packets,\\n        uint256[] memory _packetMsgValues\\n    ) internal pure returns (InboundPacket[] memory packets) {\\n        packets = new InboundPacket[](_packets.length);\\n        for (uint256 i = 0; i < _packets.length; i++) {\\n            bytes calldata packet = _packets[i];\\n            packets[i] = PacketDecoder.decode(packet);\\n            // @dev Allows the verifier to specify the msg.value that gets passed in lzReceive.\\n            packets[i].value = _packetMsgValues[i];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcb2fb1c5b2eb3731de78b479b9c2ab3bba326fe0b0b3a008590f18e881e457a6\",\"license\":\"MIT\"},\"@layerzerolabs/onft-evm/contracts/libs/ONFTComposeMsgCodec.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.22;\\n\\n/**\\n * @title ONFT Composed Message Codec\\n * @notice Library for encoding and decoding ONFT composed messages.\\n */\\nlibrary ONFTComposeMsgCodec {\\n    // Offset constants for decoding composed messages\\n    uint8 private constant NONCE_OFFSET = 8;\\n    uint8 private constant SRC_EID_OFFSET = 12;\\n    uint8 private constant COMPOSE_FROM_OFFSET = 44;\\n\\n    /**\\n     * @dev Encodes a ONFT721 composed message.\\n     * @param _nonce The nonce value.\\n     * @param _srcEid The source LayerZero endpoint ID.\\n     * @param _composeMsg The composed message.\\n     * @return The encoded payload, including the composed message.\\n     */\\n    function encode(\\n        uint64 _nonce,\\n        uint32 _srcEid,\\n        bytes memory _composeMsg // 0x[composeFrom][composeMsg]\\n    ) internal pure returns (bytes memory) {\\n        return abi.encodePacked(_nonce, _srcEid, _composeMsg);\\n    }\\n\\n    /**\\n     * @dev Retrieves the nonce for the composed message.\\n     * @param _msg The message.\\n     * @return The nonce value.\\n     */\\n    function nonce(bytes calldata _msg) internal pure returns (uint64) {\\n        return uint64(bytes8(_msg[:NONCE_OFFSET]));\\n    }\\n\\n    /**\\n     * @dev Retrieves the source LayerZero endpoint ID for the composed message.\\n     * @param _msg The message.\\n     * @return The source LayerZero endpoint ID.\\n     */\\n    function srcEid(bytes calldata _msg) internal pure returns (uint32) {\\n        return uint32(bytes4(_msg[NONCE_OFFSET:SRC_EID_OFFSET]));\\n    }\\n\\n    /**\\n     * @dev Retrieves the composeFrom value from the composed message.\\n     * @param _msg The message.\\n     * @return The composeFrom value as bytes32.\\n     */\\n    function composeFrom(bytes calldata _msg) internal pure returns (bytes32) {\\n        return bytes32(_msg[SRC_EID_OFFSET:COMPOSE_FROM_OFFSET]);\\n    }\\n\\n    /**\\n     * @dev Retrieves the composed message.\\n     * @param _msg The message.\\n     * @return The composed message.\\n     */\\n    function composeMsg(bytes calldata _msg) internal pure returns (bytes memory) {\\n        return _msg[COMPOSE_FROM_OFFSET:];\\n    }\\n\\n    /**\\n     * @dev Converts an address to bytes32.\\n     * @param _addr The address to convert.\\n     * @return The bytes32 representation of the address.\\n     */\\n    function addressToBytes32(address _addr) internal pure returns (bytes32) {\\n        return bytes32(uint256(uint160(_addr)));\\n    }\\n\\n    /**\\n     * @dev Converts bytes32 to an address.\\n     * @param _b The bytes32 value to convert.\\n     * @return The address representation of bytes32.\\n     */\\n    function bytes32ToAddress(bytes32 _b) internal pure returns (address) {\\n        return address(uint160(uint256(_b)));\\n    }\\n}\\n\",\"keccak256\":\"0x6295798bcb8d26c4cf1ea08243e359a2ea63f2f455519f194198e4506d9b7e14\",\"license\":\"MIT\"},\"@layerzerolabs/onft-evm/contracts/onft721/ONFT721Adapter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.22;\\n\\nimport { IERC721 } from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\nimport { ONFT721Core } from \\\"./ONFT721Core.sol\\\";\\n\\n/**\\n * @title ONFT721Adapter Contract\\n * @dev ONFT721Adapter is a wrapper used to enable cross-chain transferring of an existing ERC721 token.\\n * @dev ERC721 NFTs from extensions which revert certain transactions, such as ones from blocked wallets or soulbound\\n * @dev tokens, may still be bridgeable.\\n */\\nabstract contract ONFT721Adapter is ONFT721Core {\\n    IERC721 internal immutable innerToken;\\n\\n    /**\\n     * @dev Constructor for the ONFT721 contract.\\n     * @param _token The underlying ERC721 token address this adapts\\n     * @param _lzEndpoint The LayerZero endpoint address.\\n     * @param _delegate The delegate capable of making OApp configurations inside of the endpoint.\\n     */\\n    constructor(address _token, address _lzEndpoint, address _delegate) ONFT721Core(_lzEndpoint, _delegate) {\\n        innerToken = IERC721(_token);\\n    }\\n\\n    /**\\n     * @notice Retrieves the address of the underlying ERC721 implementation (ie. external contract).\\n     */\\n    function token() external view returns (address) {\\n        return address(innerToken);\\n    }\\n\\n    /**\\n     * @notice Indicates whether the ONFT721 contract requires approval of the 'token()' to send.\\n     * @dev In the case of ONFT where the contract IS the token, approval is NOT required.\\n     * @return requiresApproval Needs approval of the underlying token implementation.\\n     */\\n    function approvalRequired() external pure virtual returns (bool) {\\n        return true;\\n    }\\n\\n    function _debit(address _from, uint256 _tokenId, uint32 /*_dstEid*/) internal virtual override {\\n        // @dev Dont need to check onERC721Received() when moving into this contract, ie. no 'safeTransferFrom' required\\n        innerToken.transferFrom(_from, address(this), _tokenId);\\n    }\\n\\n    function _credit(address _toAddress, uint256 _tokenId, uint32 /*_srcEid*/) internal virtual override {\\n        // @dev Do not need to check onERC721Received() when moving out of this contract, ie. no 'safeTransferFrom'\\n        // required\\n        // @dev The default implementation does not implement IERC721Receiver as 'safeTransferFrom' is not used.\\n        // @dev If IERC721Receiver is required, ensure proper re-entrancy protection is implemented.\\n        innerToken.transferFrom(address(this), _toAddress, _tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0x673a4dbc59476480f5577c041106a1a04d23b7a63fab8139a7b5c4b55c2d74bb\",\"license\":\"MIT\"},\"@layerzerolabs/onft-evm/contracts/onft721/ONFT721Core.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.22;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport { OApp, Origin } from \\\"@layerzerolabs/oapp-evm/contracts/oapp/OApp.sol\\\";\\nimport { OAppOptionsType3 } from \\\"@layerzerolabs/oapp-evm/contracts/oapp/libs/OAppOptionsType3.sol\\\";\\nimport { IOAppMsgInspector } from \\\"@layerzerolabs/oapp-evm/contracts/oapp/interfaces/IOAppMsgInspector.sol\\\";\\nimport { OAppPreCrimeSimulator } from \\\"@layerzerolabs/oapp-evm/contracts/precrime/OAppPreCrimeSimulator.sol\\\";\\n\\nimport { IONFT721, MessagingFee, MessagingReceipt, SendParam } from \\\"./interfaces/IONFT721.sol\\\";\\nimport { ONFT721MsgCodec } from \\\"./libs/ONFT721MsgCodec.sol\\\";\\nimport { ONFTComposeMsgCodec } from \\\"../libs/ONFTComposeMsgCodec.sol\\\";\\n\\n/**\\n * @title ONFT721Core\\n * @dev Abstract contract for an ONFT721 token.\\n */\\nabstract contract ONFT721Core is IONFT721, OApp, OAppPreCrimeSimulator, OAppOptionsType3 {\\n    using ONFT721MsgCodec for bytes;\\n    using ONFT721MsgCodec for bytes32;\\n\\n    // @notice Msg types that are used to identify the various OFT operations.\\n    // @dev This can be extended in child contracts for non-default oft operations\\n    // @dev These values are used in things like combineOptions() in OAppOptionsType3.sol.\\n    uint16 public constant SEND = 1;\\n    uint16 public constant SEND_AND_COMPOSE = 2;\\n\\n    // Address of an optional contract to inspect both 'message' and 'options'\\n    address public msgInspector;\\n\\n    event MsgInspectorSet(address inspector);\\n\\n    /**\\n     * @dev Constructor.\\n     * @param _lzEndpoint The address of the LayerZero endpoint.\\n     * @param _delegate The delegate capable of making OApp configurations inside of the endpoint.\\n     */\\n    constructor(address _lzEndpoint, address _delegate) Ownable(_delegate) OApp(_lzEndpoint, _delegate) {}\\n\\n    /**\\n     * @notice Retrieves interfaceID and the version of the ONFT.\\n     * @return interfaceId The interface ID (0x23e18da6).\\n     * @return version The version.\\n     * @dev version: Indicates a cross-chain compatible msg encoding with other ONFTs.\\n     * @dev If a new feature is added to the ONFT cross-chain msg encoding, the version will be incremented.\\n     * @dev ie. localONFT version(x,1) CAN send messages to remoteONFT version(x,1)\\n     */\\n    function onftVersion() external pure virtual returns (bytes4 interfaceId, uint64 version) {\\n        return (type(IONFT721).interfaceId, 1);\\n    }\\n\\n    /**\\n     * @notice Sets the message inspector address for the OFT.\\n     * @param _msgInspector The address of the message inspector.\\n     * @dev This is an optional contract that can be used to inspect both 'message' and 'options'.\\n     * @dev Set it to address(0) to disable it, or set it to a contract address to enable it.\\n     */\\n    function setMsgInspector(address _msgInspector) public virtual onlyOwner {\\n        msgInspector = _msgInspector;\\n        emit MsgInspectorSet(_msgInspector);\\n    }\\n\\n    function quoteSend(\\n        SendParam calldata _sendParam,\\n        bool _payInLzToken\\n    ) external view virtual returns (MessagingFee memory msgFee) {\\n        (bytes memory message, bytes memory options) = _buildMsgAndOptions(_sendParam);\\n        return _quote(_sendParam.dstEid, message, options, _payInLzToken);\\n    }\\n\\n    function send(\\n        SendParam calldata _sendParam,\\n        MessagingFee calldata _fee,\\n        address _refundAddress\\n    ) external payable virtual returns (MessagingReceipt memory msgReceipt) {\\n        _debit(msg.sender, _sendParam.tokenId, _sendParam.dstEid);\\n\\n        (bytes memory message, bytes memory options) = _buildMsgAndOptions(_sendParam);\\n\\n        // @dev Sends the message to the LayerZero Endpoint, returning the MessagingReceipt.\\n        msgReceipt = _lzSend(_sendParam.dstEid, message, options, _fee, _refundAddress);\\n        emit ONFTSent(msgReceipt.guid, _sendParam.dstEid, msg.sender, _sendParam.tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to build the message and options.\\n     * @param _sendParam The parameters for the send() operation.\\n     * @return message The encoded message.\\n     * @return options The encoded options.\\n     */\\n    function _buildMsgAndOptions(\\n        SendParam calldata _sendParam\\n    ) internal view virtual returns (bytes memory message, bytes memory options) {\\n        if (_sendParam.to == bytes32(0)) revert InvalidReceiver();\\n        bool hasCompose;\\n        (message, hasCompose) = ONFT721MsgCodec.encode(_sendParam.to, _sendParam.tokenId, _sendParam.composeMsg);\\n        uint16 msgType = hasCompose ? SEND_AND_COMPOSE : SEND;\\n\\n        options = combineOptions(_sendParam.dstEid, msgType, _sendParam.extraOptions);\\n\\n        // @dev Optionally inspect the message and options depending if the OApp owner has set a msg inspector.\\n        // @dev If it fails inspection, needs to revert in the implementation. ie. does not rely on return boolean\\n        address inspector = msgInspector; // caches the msgInspector to avoid potential double storage read\\n        if (inspector != address(0)) IOAppMsgInspector(inspector).inspect(message, options);\\n    }\\n\\n    /**\\n     * @dev Internal function to handle the receive on the LayerZero endpoint.\\n     * @param _origin The origin information.\\n     *  - srcEid: The source chain endpoint ID.\\n     *  - sender: The sender address from the src chain.\\n     *  - nonce: The nonce of the LayerZero message.\\n     * @param _guid The unique identifier for the received LayerZero message.\\n     * @param _message The encoded message.\\n     * @dev _executor The address of the executor.\\n     * @dev _extraData Additional data.\\n     */\\n    function _lzReceive(\\n        Origin calldata _origin,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        address /*_executor*/, // @dev unused in the default implementation.\\n        bytes calldata /*_extraData*/ // @dev unused in the default implementation.\\n    ) internal virtual override {\\n        address toAddress = _message.sendTo().bytes32ToAddress();\\n        uint256 tokenId = _message.tokenId();\\n\\n        _credit(toAddress, tokenId, _origin.srcEid);\\n\\n        if (_message.isComposed()) {\\n            bytes memory composeMsg = ONFTComposeMsgCodec.encode(_origin.nonce, _origin.srcEid, _message.composeMsg());\\n            // @dev As batching is not implemented, the compose index is always 0.\\n            // @dev If batching is added, the index will need to be tracked.\\n            endpoint.sendCompose(toAddress, _guid, 0 /* the index of composed message*/, composeMsg);\\n        }\\n\\n        emit ONFTReceived(_guid, _origin.srcEid, toAddress, tokenId);\\n    }\\n\\n    /*\\n     * @dev Internal function to handle the OAppPreCrimeSimulator simulated receive.\\n     * @param _origin The origin information.\\n     *  - srcEid: The source chain endpoint ID.\\n     *  - sender: The sender address from the src chain.\\n     *  - nonce: The nonce of the LayerZero message.\\n     * @param _guid The unique identifier for the received LayerZero message.\\n     * @param _message The LayerZero message.\\n     * @param _executor The address of the off-chain executor.\\n     * @param _extraData Arbitrary data passed by the msg executor.\\n     * @dev Enables the preCrime simulator to mock sending lzReceive() messages,\\n     * routes the msg down from the OAppPreCrimeSimulator, and back up to the OAppReceiver.\\n     */\\n    function _lzReceiveSimulate(\\n        Origin calldata _origin,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        address _executor,\\n        bytes calldata _extraData\\n    ) internal virtual override {\\n        _lzReceive(_origin, _guid, _message, _executor, _extraData);\\n    }\\n\\n    /**\\n     * @dev Check if the peer is considered 'trusted' by the OApp.\\n     * @param _eid The endpoint ID to check.\\n     * @param _peer The peer to check.\\n     * @return Whether the peer passed is considered 'trusted' by the OApp.\\n     * @dev Enables OAppPreCrimeSimulator to check whether a potential Inbound Packet is from a trusted source.\\n     */\\n    function isPeer(uint32 _eid, bytes32 _peer) public view virtual override returns (bool) {\\n        return peers[_eid] == _peer;\\n    }\\n\\n    function _debit(address /*_from*/, uint256 /*_tokenId*/, uint32 /*_dstEid*/) internal virtual;\\n\\n    function _credit(address /*_to*/, uint256 /*_tokenId*/, uint32 /*_srcEid*/) internal virtual;\\n}\\n\",\"keccak256\":\"0xe28bb9c335705cd2a54dbe0562b808a7a097c51b27dc1797f1c7565791d66899\",\"license\":\"MIT\"},\"@layerzerolabs/onft-evm/contracts/onft721/interfaces/IONFT721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.22;\\n\\nimport { MessagingFee, MessagingReceipt } from \\\"@layerzerolabs/oapp-evm/contracts/oapp/OAppSender.sol\\\";\\n\\n/**\\n * @dev Struct representing token parameters for the ONFT send() operation.\\n */\\nstruct SendParam {\\n    uint32 dstEid; // Destination LayerZero EndpointV2 ID.\\n    bytes32 to; // Recipient address.\\n    uint256 tokenId;\\n    bytes extraOptions; // Additional options supplied by the caller to be used in the LayerZero message.\\n    bytes composeMsg; // The composed message for the send() operation.\\n    bytes onftCmd; // The ONFT command to be executed, unused in default ONFT implementations.\\n}\\n\\n/**\\n * @title IONFT\\n * @dev Interface for the ONFT721 token.\\n * @dev Does not inherit ERC721 to accommodate usage by OFT721Adapter.\\n */\\ninterface IONFT721 {\\n    // Custom error messages\\n    error InvalidReceiver();\\n    error OnlyNFTOwner(address caller, address owner);\\n\\n    // Events\\n    event ONFTSent(\\n        bytes32 indexed guid, // GUID of the ONFT message.\\n        uint32 dstEid, // Destination Endpoint ID.\\n        address indexed fromAddress, // Address of the sender on the src chain.\\n        uint256 tokenId // ONFT ID sent.\\n    );\\n\\n    event ONFTReceived(\\n        bytes32 indexed guid, // GUID of the ONFT message.\\n        uint32 srcEid, // Source Endpoint ID.\\n        address indexed toAddress, // Address of the recipient on the dst chain.\\n        uint256 tokenId // ONFT ID received.\\n    );\\n\\n    /**\\n     * @notice Retrieves interfaceID and the version of the ONFT.\\n     * @return interfaceId The interface ID.\\n     * @return version The version.\\n     * @dev interfaceId: This specific interface ID is '0x94642228'.\\n     * @dev version: Indicates a cross-chain compatible msg encoding with other ONFTs.\\n     * @dev If a new feature is added to the ONFT cross-chain msg encoding, the version will be incremented.\\n     * ie. localONFT version(x,1) CAN send messages to remoteONFT version(x,1)\\n     */\\n    function onftVersion() external view returns (bytes4 interfaceId, uint64 version);\\n\\n    /**\\n     * @notice Retrieves the address of the token associated with the ONFT.\\n     * @return token The address of the ERC721 token implementation.\\n     */\\n    function token() external view returns (address);\\n\\n    /**\\n     * @notice Indicates whether the ONFT contract requires approval of the 'token()' to send.\\n     * @return requiresApproval Needs approval of the underlying token implementation.\\n     * @dev Allows things like wallet implementers to determine integration requirements,\\n     * without understanding the underlying token implementation.\\n     */\\n    function approvalRequired() external view returns (bool);\\n\\n    /**\\n     * @notice Provides a quote for the send() operation.\\n     * @param _sendParam The parameters for the send() operation.\\n     * @param _payInLzToken Flag indicating whether the caller is paying in the LZ token.\\n     * @return fee The calculated LayerZero messaging fee from the send() operation.\\n     * @dev MessagingFee: LayerZero msg fee\\n     *  - nativeFee: The native fee.\\n     *  - lzTokenFee: The lzToken fee.\\n     */\\n    function quoteSend(SendParam calldata _sendParam, bool _payInLzToken) external view returns (MessagingFee memory);\\n\\n    /**\\n     * @notice Executes the send() operation.\\n     * @param _sendParam The parameters for the send operation.\\n     * @param _fee The fee information supplied by the caller.\\n     *      - nativeFee: The native fee.\\n     *      - lzTokenFee: The lzToken fee.\\n     * @param _refundAddress The address to receive any excess funds from fees etc. on the src.\\n     * @return receipt The LayerZero messaging receipt from the send() operation.\\n     * @dev MessagingReceipt: LayerZero msg receipt\\n     *  - guid: The unique identifier for the sent message.\\n     *  - nonce: The nonce of the sent message.\\n     *  - fee: The LayerZero fee incurred for the message.\\n     */\\n    function send(\\n        SendParam calldata _sendParam,\\n        MessagingFee calldata _fee,\\n        address _refundAddress\\n    ) external payable returns (MessagingReceipt memory);\\n}\\n\",\"keccak256\":\"0x65efa7585fa33d3daa67519a43e026403a0946480dcbf72911fb11b5790f89cf\",\"license\":\"MIT\"},\"@layerzerolabs/onft-evm/contracts/onft721/libs/ONFT721MsgCodec.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.22;\\n\\n/**\\n * @title ONFT721MsgCodec\\n * @notice Library for encoding and decoding ONFT721 LayerZero messages.\\n */\\nlibrary ONFT721MsgCodec {\\n    uint8 private constant SEND_TO_OFFSET = 32;\\n    uint8 private constant TOKEN_ID_OFFSET = 64;\\n\\n    /**\\n     * @dev Encodes an ONFT721 LayerZero message payload.\\n     * @param _sendTo The recipient address.\\n     * @param _tokenId The ID of the token to transfer.\\n     * @param _composeMsg The composed payload.\\n     * @return payload The encoded message payload.\\n     * @return hasCompose A boolean indicating whether the message payload contains a composed payload.\\n     */\\n    function encode(\\n        bytes32 _sendTo,\\n        uint256 _tokenId,\\n        bytes memory _composeMsg\\n    ) internal view returns (bytes memory payload, bool hasCompose) {\\n        hasCompose = _composeMsg.length > 0;\\n        payload = hasCompose\\n            ? abi.encodePacked(_sendTo, _tokenId, addressToBytes32(msg.sender), _composeMsg)\\n            : abi.encodePacked(_sendTo, _tokenId);\\n    }\\n\\n    /**\\n     * @dev Decodes sendTo from the ONFT LayerZero message.\\n     * @param _msg The message.\\n     * @return The recipient address in bytes32 format.\\n     */\\n    function sendTo(bytes calldata _msg) internal pure returns (bytes32) {\\n        return bytes32(_msg[:SEND_TO_OFFSET]);\\n    }\\n\\n    /**\\n     * @dev Decodes tokenId from the ONFT LayerZero message.\\n     * @param _msg The message.\\n     * @return The ID of the tokens to transfer.\\n     */\\n    function tokenId(bytes calldata _msg) internal pure returns (uint256) {\\n        return uint256(bytes32(_msg[SEND_TO_OFFSET:TOKEN_ID_OFFSET]));\\n    }\\n\\n    /**\\n     * @dev Decodes whether there is a composed payload.\\n     * @param _msg The message.\\n     * @return A boolean indicating whether the message has a composed payload.\\n     */\\n    function isComposed(bytes calldata _msg) internal pure returns (bool) {\\n        return _msg.length > TOKEN_ID_OFFSET;\\n    }\\n\\n    /**\\n     * @dev Decodes the composed message.\\n     * @param _msg The message.\\n     * @return The composed message.\\n     */\\n    function composeMsg(bytes calldata _msg) internal pure returns (bytes memory) {\\n        return _msg[TOKEN_ID_OFFSET:];\\n    }\\n\\n    /**\\n     * @dev Converts an address to bytes32.\\n     * @param _addr The address to convert.\\n     * @return The bytes32 representation of the address.\\n     */\\n    function addressToBytes32(address _addr) internal pure returns (bytes32) {\\n        return bytes32(uint256(uint160(_addr)));\\n    }\\n\\n    /**\\n     * @dev Converts bytes32 to an address.\\n     * @param _b The bytes32 value to convert.\\n     * @return The address representation of bytes32.\\n     */\\n    function bytes32ToAddress(bytes32 _b) internal pure returns (address) {\\n        return address(uint160(uint256(_b)));\\n    }\\n}\\n\",\"keccak256\":\"0x2d7fbd79ec71a17b021c4ec85792ee050bcfa658665aa60fa0f0cdcff16f8f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1363.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/IERC1363.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @title IERC1363\\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\\n *\\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\\n */\\ninterface IERC1363 is IERC20, IERC165 {\\n    /*\\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\\n     * 0xb0202a11 ===\\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\\n     */\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @param data Additional data with no specified format, sent in call to `spender`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9b6b3e7803bc5f2f8cd7ad57db8ac1def61a9930a5a3107df4882e028a9605d7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0xce41876e78d1badc0512229b4d14e4daf83bc1003d7f83978d18e0e56f965b9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC1363} from \\\"../../../interfaces/IERC1363.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    /**\\n     * @dev An operation with an ERC-20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     *\\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\\n     * only sets the \\\"standard\\\" allowance. Any temporary allowance will remain active, in addition to the value being\\n     * set here.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            safeTransfer(token, to, value);\\n        } else if (!token.transferAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferFromAndCallRelaxed(\\n        IERC1363 token,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length == 0) {\\n            safeTransferFrom(token, from, to, value);\\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\\n     * once without retrying, and relies on the returned value to be true.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            forceApprove(token, to, value);\\n        } else if (!token.approveAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            // bubble errors\\n            if iszero(success) {\\n                let ptr := mload(0x40)\\n                returndatacopy(ptr, 0, returndatasize())\\n                revert(ptr, returndatasize())\\n            }\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n\\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\\n    }\\n}\\n\",\"keccak256\":\"0xca2ae13e0610f6a99238dd00b97bd786bc92732dae6d6b9d61f573ec51018310\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC-721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC-721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC-721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5dc63d1c6a12fe1b17793e1745877b2fcbe1964c3edfd0a482fac21ca8f18261\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Errors} from \\\"./Errors.sol\\\";\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert Errors.InsufficientBalance(address(this).balance, amount);\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert Errors.FailedCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {Errors.FailedCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert Errors.InsufficientBalance(address(this).balance, value);\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {Errors.FailedCall}) in case\\n     * of an unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {Errors.FailedCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {Errors.FailedCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            assembly (\\\"memory-safe\\\") {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert Errors.FailedCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9d8da059267bac779a2dbbb9a26c2acf00ca83085e105d62d5d4ef96054a47f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Errors.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of common custom errors used in multiple contracts\\n *\\n * IMPORTANT: Backwards compatibility is not guaranteed in future versions of the library.\\n * It is recommended to avoid relying on the error API for critical functionality.\\n *\\n * _Available since v5.1._\\n */\\nlibrary Errors {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error InsufficientBalance(uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedCall();\\n\\n    /**\\n     * @dev The deployment failed.\\n     */\\n    error FailedDeployment();\\n\\n    /**\\n     * @dev A necessary precompile is missing.\\n     */\\n    error MissingPrecompile(address);\\n}\\n\",\"keccak256\":\"0x6afa713bfd42cf0f7656efa91201007ac465e42049d7de1d50753a373648c123\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\"},\"contracts/Collection.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.22;\\n\\nimport { ONFT721Adapter } from \\\"@layerzerolabs/onft-evm/contracts/onft721/ONFT721Adapter.sol\\\";\\nimport { IERC721 } from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\ncontract Collection is ONFT721Adapter {\\n\\n    address curator;\\n    address lzEndpoint;\\n    address delegate;\\n\\n    // Store the rights to the NFT\\n    struct RoyaltyRights {\\n        uint256 tokenId;\\n        address owner;\\n        string signature;\\n    }\\n\\n    mapping(uint256 => RoyaltyRights) public rights;\\n\\n    constructor(\\n        address _curator,\\n        address _token,\\n        address _lzEndpoint,\\n        address _delegate\\n    ) ONFT721Adapter(_token, _lzEndpoint, _delegate) {\\n        curator = _curator;\\n        lzEndpoint = _lzEndpoint;\\n        delegate = _delegate;\\n    }\\n\\n    function stake(uint256 tokenId) external onlyOwner {\\n        // Send NFT cross-chain to staking contract on destination chain\\n        _debit(msg.sender, tokenId, 0);\\n    }\\n\\n    function unstake(uint256 tokenId) external onlyOwner {\\n        // Send NFT cross-chain to staking contract on destination chain\\n        _credit(msg.sender, tokenId, 0);\\n    }\\n\\n\\n    // Handle Royalty Rights\\n    function setRoyaltyRights(uint256 tokenId, RoyaltyRights memory _rights) public {\\n        // Store the rights to the NFT\\n        rights[tokenId] = _rights;\\n    }\\n\\n    function setRoyaltyRights(uint256 tokenId, address owner, string memory signature) external {\\n        // Prevent unauthorized access\\n        require(IERC721(innerToken).ownerOf(tokenId) == owner, \\\"You don't own this NFT\\\");\\n\\n        // Store the rights to the NFT\\n        rights[tokenId] = RoyaltyRights(tokenId, owner, signature);\\n    }\\n\\n    function revokeRoyaltyRights(uint256 tokenId) public {\\n        // Revoke the rights to the NFT\\n        delete rights[tokenId];\\n    }\\n\\n    function revokeRoyaltyRights(uint256 tokenId, address owner) public {\\n        // Prevent unauthorized access\\n        require(IERC721(innerToken).ownerOf(tokenId) == owner, \\\"You don't own this NFT\\\");\\n\\n        // Revoke the rights to the NFT\\n        delete rights[tokenId];\\n    }\\n\\n}\\n\",\"keccak256\":\"0xe2de3f5472240f1dea93c36e4a94725f4fe6529026c0dac268e2599ad4163781\",\"license\":\"UNLICENSED\"},\"contracts/Curator.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.22;\\n\\nimport { Collection } from \\\"./Collection.sol\\\";\\nimport { OApp, MessagingFee, Origin } from \\\"@layerzerolabs/oapp-evm/contracts/oapp/OApp.sol\\\";\\nimport { MessagingReceipt } from \\\"@layerzerolabs/oapp-evm/contracts/oapp/OAppSender.sol\\\";\\nimport { IOAppReceiver, Origin } from \\\"@layerzerolabs/oapp-evm/contracts/oapp/interfaces/IOAppReceiver.sol\\\";\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { IERC721 } from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n// Sign Protocol Dependencies\\nimport { ISP } from \\\"@ethsign/sign-protocol-evm/src/interfaces/ISP.sol\\\";\\nimport { Attestation } from \\\"@ethsign/sign-protocol-evm/src/models/Attestation.sol\\\";\\nimport { DataLocation } from \\\"@ethsign/sign-protocol-evm/src/models/DataLocation.sol\\\";\\nimport { ISPHook } from \\\"@ethsign/sign-protocol-evm/src/interfaces/ISPHook.sol\\\";\\n\\ncontract Curator is OApp, ISPHook {\\n    address public galleryAddress;\\n    address public lzEndpoint;\\n    address public curatorDelegate;\\n\\n    mapping(address => address) public collections;\\n\\n    modifier ownsNFT(address tokenAddress, uint256 tokenId) {\\n        require(IERC721(tokenAddress).ownerOf(tokenId) == msg.sender, \\\"You don't own this NFT\\\");\\n        _;\\n    }\\n\\n    modifier collectionSupported(address tokenAddress) {\\n        require(collections[tokenAddress] != address(0), \\\"Collection does not exist\\\");\\n        _;\\n    }\\n\\n    constructor(address _endpoint, address _delegate) OApp(_endpoint, _delegate) Ownable(_delegate) {}\\n\\n    function createCollection(address tokenAddress) public {        \\n        Collection child = new Collection(address(this), tokenAddress, lzEndpoint, curatorDelegate);\\n        collections[tokenAddress] = address(child);\\n    }\\n\\n    function send(\\n        uint32 _dstEid,\\n        string memory _message,\\n        bytes calldata _options\\n    ) external payable returns (MessagingReceipt memory receipt) {\\n        bytes memory _payload = abi.encode(_message);\\n        receipt = _lzSend(_dstEid, _payload, _options, MessagingFee(msg.value, 0), payable(msg.sender));\\n    }\\n\\n    function quote(\\n        uint32 _dstEid,\\n        string memory _message,\\n        bytes memory _options,\\n        bool _payInLzToken\\n    ) public view returns (MessagingFee memory fee) {\\n        bytes memory payload = abi.encode(_message);\\n        fee = _quote(_dstEid, payload, _options, _payInLzToken);\\n    }\\n\\n    function _lzReceive(\\n        Origin calldata /*_origin*/,\\n        bytes32 /*_guid*/,\\n        bytes calldata payload,\\n        address /*_executor*/,\\n        bytes calldata /*_extraData*/\\n    ) internal override {}\\n\\n\\n    // Handle Sign Protocol events    \\n     struct RoyaltyRights {\\n        address tokenAddress;\\n        uint256 tokenId;\\n        address owner;\\n        string signature;\\n    }\\n\\n    // Receiving attestation means that the owner has the right to receive royalties\\n    function didReceiveAttestation(\\n        address attester,\\n        uint64 schemaId,\\n        uint64 attestationId,\\n        bytes calldata extraData\\n    ) external payable override {        \\n        RoyaltyRights memory rights = abi.decode(extraData, (RoyaltyRights));\\n        Collection collection = Collection(collections[rights.tokenAddress]);\\n        collection.setRoyaltyRights(rights.tokenId, rights.owner, rights.signature);\\n    }\\n\\n    function didReceiveAttestation(\\n        address attester,\\n        uint64, // schemaId\\n        uint64 attestationId,\\n        IERC20 resolverFeeERC20Token,\\n        uint256 resolverFeeERC20Amount,\\n        bytes calldata extraData\\n    ) external override {}\\n\\n\\n    // When an attestation is revoked, the owner loses the right to receive royalties\\n    function didReceiveRevocation(\\n        address attester,\\n        uint64, // schemaId\\n        uint64 attestationId,\\n        bytes calldata extraData\\n    ) external payable override {\\n        RoyaltyRights memory rights = abi.decode(extraData, (RoyaltyRights));\\n        Collection collection = Collection(collections[rights.tokenAddress]);\\n        collection.revokeRoyaltyRights(rights.tokenId);\\n    }\\n\\n    function didReceiveRevocation(\\n        address attester,\\n        uint64, // schemaId\\n        uint64 attestationId,\\n        IERC20 resolverFeeERC20Token,\\n        uint256 resolverFeeERC20Amount,\\n        bytes calldata extraData\\n    ) external override {}\\n}\\n\",\"keccak256\":\"0xff45f838fb56af59569b806765b4071718b38325b05c7d29f02d709009fba85d\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b506040516200487a3803806200487a83398101604081905262000034916200017c565b81818181806001600160a01b0381166200006857604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b62000073816200010f565b506001600160a01b038083166080528116620000a257604051632d618d8160e21b815260040160405180910390fd5b60805160405163ca5eb5e160e01b81526001600160a01b0383811660048301529091169063ca5eb5e190602401600060405180830381600087803b158015620000ea57600080fd5b505af1158015620000ff573d6000803e3d6000fd5b50505050505050505050620001b4565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b03811681146200017757600080fd5b919050565b600080604083850312156200019057600080fd5b6200019b836200015f565b9150620001ab602084016200015f565b90509250929050565b608051614680620001fa600039600081816102b3015281816104f50152818161074f01528181610aae01528181610ba301528181610ca30152610d5e01526146806000f3fe6080604052600436106200015b5760003560e01c80637d25a05e11620000c5578063e0539e581162000078578063e0539e581462000438578063e33361f4146200045e578063e830b5c71462000277578063f2fde38b1462000475578063f77e5dd3146200049a578063ff7bd03d14620004ce57600080fd5b80637d25a05e146200030f57806382413eac146200034d5780638da5cb5b1462000391578063b353aaa714620003b1578063bb0b6a5314620003d3578063ca5eb5e1146200041357600080fd5b8063372d6ea0116200011e578063372d6ea0146200020257806343add2e6146200023d5780634466507a14620002775780635e280f11146200029f578063715018a614620002d5578063774d67f914620002ed57600080fd5b806313137d65146200016057806317442b7014620001795780632069e95314620001a15780633398b4ed14620001c65780633400288b14620001dd575b600080fd5b620001776200017136600462000f24565b620004f3565b005b3480156200018657600080fd5b50604080516001815260026020820152015b60405180910390f35b348015620001ae57600080fd5b5062000177620001c036600462000fce565b620005a4565b62000177620001d73660046200100b565b62000645565b348015620001ea57600080fd5b5062000177620001fc366004620010aa565b620006eb565b3480156200020f57600080fd5b5060045462000224906001600160a01b031681565b6040516001600160a01b03909116815260200162000198565b3480156200024a57600080fd5b50620002246200025c36600462000fce565b6005602052600090815260409020546001600160a01b031681565b3480156200028457600080fd5b506200017762000296366004620010d7565b50505050505050565b348015620002ac57600080fd5b50620002247f000000000000000000000000000000000000000000000000000000000000000081565b348015620002e257600080fd5b506200017762000705565b348015620002fa57600080fd5b5060025462000224906001600160a01b031681565b3480156200031c57600080fd5b50620003346200032e366004620010aa565b6200071d565b6040516001600160401b03909116815260200162000198565b3480156200035a57600080fd5b50620003806200036c36600462001167565b6001600160a01b0381163014949350505050565b604051901515815260200162000198565b3480156200039e57600080fd5b506000546001600160a01b031662000224565b348015620003be57600080fd5b5060035462000224906001600160a01b031681565b348015620003e057600080fd5b5062000404620003f2366004620011d5565b60016020526000908152604090205481565b60405190815260200162000198565b3480156200042057600080fd5b50620001776200043236600462000fce565b62000726565b6200044f62000449366004620012a8565b620007b0565b60405162000198919062001327565b620001776200046f3660046200100b565b6200083f565b3480156200048257600080fd5b50620001776200049436600462000fce565b6200089e565b348015620004a757600080fd5b50620004bf620004b93660046200136a565b620008e2565b60405162000198919062001409565b348015620004db57600080fd5b5062000380620004ed36600462001421565b6200092a565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316331462000544576040516391ac5e4f60e01b81523360048201526024015b60405180910390fd5b6020870180359062000562906200055c908a620011d5565b62000962565b146200029657620005776020880188620011d5565b60405163309afaf360e21b815263ffffffff9091166004820152602088013560248201526044016200053b565b600354600454604051600092309285926001600160a01b039283169290911690620005cf9062000e54565b6001600160a01b039485168152928416602084015290831660408301529091166060820152608001604051809103906000f08015801562000614573d6000803e3d6000fd5b506001600160a01b03928316600090815260056020526040902080546001600160a01b031916919093161790915550565b6000620006558284018462001440565b80516001600160a01b039081166000908152600560209081526040918290205490840151828501516060860151935163ef64ba5960e01b81529596509190931693849363ef64ba5993620006ae93919260040162001547565b600060405180830381600087803b158015620006c957600080fd5b505af1158015620006de573d6000803e3d6000fd5b5050505050505050505050565b620006f5620009a0565b620007018282620009cf565b5050565b6200070f620009a0565b6200071b600062000a24565b565b60005b92915050565b62000730620009a0565b60405163ca5eb5e160e01b81526001600160a01b0382811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063ca5eb5e190602401600060405180830381600087803b1580156200079457600080fd5b505af1158015620007a9573d6000803e3d6000fd5b5050505050565b620007ba62000e62565b600084604051602001620007cf919062001573565b60408051601f198184030181526020601f870181900481028401810190925285835292506200083591889184919088908890819084018382808284376000920182905250604080518082019091523481526020810191909152925033915062000a749050565b9695505050505050565b60006200084f8284018462001440565b80516001600160a01b039081166000908152600560209081526040918290205490840151915163f58409b960e01b81526004810192909252929350911690819063f58409b990602401620006ae565b620008a8620009a0565b6001600160a01b038116620008d457604051631e4fbdf760e01b8152600060048201526024016200053b565b620008df8162000a24565b50565b60408051808201909152600080825260208201526000846040516020016200090b919062001573565b6040516020818303038152906040529050620008358682868662000b8d565b6000602082018035906001908390620009449086620011d5565b63ffffffff1681526020810191909152604001600020541492915050565b63ffffffff811660009081526001602052604081205480620007205760405163f6ff4fb760e01b815263ffffffff841660048201526024016200053b565b6000546001600160a01b031633146200071b5760405163118cdaa760e01b81523360048201526024016200053b565b63ffffffff8216600081815260016020908152604091829020849055815192835282018390527f238399d427b947898edb290f5ff0f9109849b1c3ba196a42e35f00c50a54b98b910160405180910390a15050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b62000a7e62000e62565b600062000a8f846000015162000c75565b60208501519091501562000aac5762000aac846020015162000c9f565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632637a450826040518060a001604052808b63ffffffff16815260200162000afe8c62000962565b81526020018a815260200189815260200160008960200151111515815250866040518463ffffffff1660e01b815260040162000b3c92919062001588565b60806040518083038185885af115801562000b5b573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019062000b82919062001657565b979650505050505050565b60408051808201909152600080825260208201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ddc28c586040518060a001604052808863ffffffff16815260200162000bf28962000962565b8152602001878152602001868152602001851515815250306040518363ffffffff1660e01b815260040162000c2992919062001588565b6040805180830381865afa15801562000c46573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000c6c9190620016c6565b95945050505050565b600081341462000c9b576040516304fb820960e51b81523460048201526024016200053b565b5090565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e4fe1d946040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000d00573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000d269190620016e5565b90506001600160a01b03811662000d50576040516329b99a9560e11b815260040160405180910390fd5b6040805133602482018190527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03818116604485015260648085018890528551808603909101815260849094019094526020830180516001600160e01b03166323b872dd60e01b1790526200070193851692869062000dd890859062000dde565b50505050565b600080602060008451602086016000885af18062000e02576040513d6000823e3d81fd5b50506000513d9150811562000e1c57806001141562000e29565b6001600160a01b0384163b155b1562000dd857604051635274afe760e01b81526001600160a01b03851660048201526024016200053b565b612f45806200170683390190565b60405180606001604052806000801916815260200160006001600160401b0316815260200162000ea5604051806040016040528060008152602001600081525090565b905290565b60006060828403121562000ebd57600080fd5b50919050565b60008083601f84011262000ed657600080fd5b5081356001600160401b0381111562000eee57600080fd5b60208301915083602082850101111562000f0757600080fd5b9250929050565b6001600160a01b0381168114620008df57600080fd5b600080600080600080600060e0888a03121562000f4057600080fd5b62000f4c898962000eaa565b96506060880135955060808801356001600160401b038082111562000f7057600080fd5b62000f7e8b838c0162000ec3565b909750955060a08a0135915062000f958262000f0e565b90935060c0890135908082111562000fac57600080fd5b5062000fbb8a828b0162000ec3565b989b979a50959850939692959293505050565b60006020828403121562000fe157600080fd5b813562000fee8162000f0e565b9392505050565b6001600160401b0381168114620008df57600080fd5b6000806000806000608086880312156200102457600080fd5b8535620010318162000f0e565b94506020860135620010438162000ff5565b93506040860135620010558162000ff5565b925060608601356001600160401b038111156200107157600080fd5b6200107f8882890162000ec3565b969995985093965092949392505050565b803563ffffffff81168114620010a557600080fd5b919050565b60008060408385031215620010be57600080fd5b620010c98362001090565b946020939093013593505050565b600080600080600080600060c0888a031215620010f357600080fd5b8735620011008162000f0e565b96506020880135620011128162000ff5565b95506040880135620011248162000ff5565b94506060880135620011368162000f0e565b93506080880135925060a08801356001600160401b038111156200115957600080fd5b62000fbb8a828b0162000ec3565b60008060008060a085870312156200117e57600080fd5b6200118a868662000eaa565b935060608501356001600160401b03811115620011a657600080fd5b620011b48782880162000ec3565b9094509250506080850135620011ca8162000f0e565b939692955090935050565b600060208284031215620011e857600080fd5b62000fee8262001090565b634e487b7160e01b600052604160045260246000fd5b60006001600160401b0380841115620012265762001226620011f3565b604051601f8501601f19908116603f01168101908282118183101715620012515762001251620011f3565b816040528093508581528686860111156200126b57600080fd5b858560208301376000602087830101525050509392505050565b600082601f8301126200129757600080fd5b62000fee8383356020850162001209565b60008060008060608587031215620012bf57600080fd5b620012ca8562001090565b935060208501356001600160401b0380821115620012e757600080fd5b620012f58883890162001285565b945060408701359150808211156200130c57600080fd5b506200131b8782880162000ec3565b95989497509550505050565b6000608082019050825182526001600160401b036020840151166020830152604083015162001363604084018280518252602090810151910152565b5092915050565b600080600080608085870312156200138157600080fd5b6200138c8562001090565b935060208501356001600160401b0380821115620013a957600080fd5b620013b78883890162001285565b94506040870135915080821115620013ce57600080fd5b508501601f81018713620013e157600080fd5b620013f28782356020840162001209565b92505060608501358015158114620011ca57600080fd5b81518152602080830151908201526040810162000720565b6000606082840312156200143457600080fd5b62000fee838362000eaa565b6000602082840312156200145357600080fd5b81356001600160401b03808211156200146b57600080fd5b90830190608082860312156200148057600080fd5b6040516080810181811083821117156200149e576200149e620011f3565b6040528235620014ae8162000f0e565b8152602083810135908201526040830135620014ca8162000f0e565b6040820152606083013582811115620014e257600080fd5b620014f08782860162001285565b60608301525095945050505050565b6000815180845260005b81811015620015275760208185018101518683018201520162001509565b506000602082860101526020601f19601f83011685010191505092915050565b8381526001600160a01b038316602082015260606040820181905260009062000c6c90830184620014ff565b60208152600062000fee6020830184620014ff565b6040815263ffffffff8351166040820152602083015160608201526000604084015160a06080840152620015c060e0840182620014ff565b90506060850151603f198483030160a0850152620015df8282620014ff565b60809690960151151560c08501525050506001600160a01b039190911660209091015290565b6000604082840312156200161857600080fd5b604051604081018181106001600160401b03821117156200163d576200163d620011f3565b604052825181526020928301519281019290925250919050565b6000608082840312156200166a57600080fd5b604051606081018181106001600160401b03821117156200168f576200168f620011f3565b604052825181526020830151620016a68162000ff5565b6020820152620016ba846040850162001605565b60408201529392505050565b600060408284031215620016d957600080fd5b62000fee838362001605565b600060208284031215620016f857600080fd5b815162000fee8162000f0e56fe60c06040523480156200001157600080fd5b5060405162002f4538038062002f458339810160408190526200003491620001cc565b828282818181818181806001600160a01b0381166200006d57604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b62000078816200015f565b506001600160a01b038083166080528116620000a757604051632d618d8160e21b815260040160405180910390fd5b60805160405163ca5eb5e160e01b81526001600160a01b0383811660048301529091169063ca5eb5e190602401600060405180830381600087803b158015620000ef57600080fd5b505af115801562000104573d6000803e3d6000fd5b5050506001600160a01b03998a1660a0525050600580549c89166001600160a01b03199d8e16179055505060068054988716988b16989098179097555050600780549490931693909616929092179055506200022992505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b0381168114620001c757600080fd5b919050565b60008060008060808587031215620001e357600080fd5b620001ee85620001af565b9350620001fe60208601620001af565b92506200020e60408601620001af565b91506200021e60608601620001af565b905092959194509250565b60805160a051612ca96200029c600039600081816106ea01528181610a2a015281816110e9015281816114a0015261179c01526000818161039d0152818161073001528181610f4b015281816113a20152818161166b015281816119b901528181611bb50152611c6c0152612ca96000f3fe60806040526004361061021a5760003560e01c8063a694fc3a11610123578063c6414e7b116100ab578063ef64ba591161006f578063ef64ba591461067b578063f2fde38b1461069b578063f58409b9146106bb578063fc0c546a146106db578063ff7bd03d1461070e57600080fd5b8063c6414e7b146105cc578063ca5eb5e1146105f9578063d045a0dc14610619578063d42438851461062c578063e9ef21131461064c57600080fd5b8063b731ea0a116100f2578063b731ea0a1461051e578063b98bd0701461053e578063bb0b6a531461055e578063bc70b35414610599578063bd815db0146105b957600080fd5b8063a694fc3a146104a1578063a72f5dd8146104c1578063b21a33e4146104e9578063b50ecb74146104fe57600080fd5b80635a0dfe4d116101a65780637d25a05e116101755780637d25a05e146103f457806382413eac1461042f578063850729601461044f5780638da5cb5b1461046f5780639f68b9641461048d57600080fd5b80635a0dfe4d1461035b5780635e280f111461038b5780636fc1b31e146103bf578063715018a6146103df57600080fd5b806321eb730b116101ed57806321eb730b146102bb5780632e17de78146102db5780633400288b146102fb57806352ae28791461031b5780635535d4611461032e57600080fd5b8063111ecdad1461021f57806313137d651461025c57806317442b70146102715780631f5e133414610293575b600080fd5b34801561022b57600080fd5b5060045461023f906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61026f61026a366004611e53565b61072e565b005b34801561027d57600080fd5b5060408051600181526002602082015201610253565b34801561029f57600080fd5b506102a8600181565b60405161ffff9091168152602001610253565b6102ce6102c9366004611f04565b6107ee565b6040516102539190611f71565b3480156102e757600080fd5b5061026f6102f6366004611fb3565b6108a7565b34801561030757600080fd5b5061026f610316366004611fe5565b6108be565b34801561032757600080fd5b503061023f565b34801561033a57600080fd5b5061034e610349366004612021565b6108d4565b60405161025391906120a4565b34801561036757600080fd5b5061037b610376366004611fe5565b610979565b6040519015158152602001610253565b34801561039757600080fd5b5061023f7f000000000000000000000000000000000000000000000000000000000000000081565b3480156103cb57600080fd5b5061026f6103da3660046120b7565b610998565b3480156103eb57600080fd5b5061026f6109f5565b34801561040057600080fd5b5061041761040f366004611fe5565b600092915050565b6040516001600160401b039091168152602001610253565b34801561043b57600080fd5b5061037b61044a3660046120d4565b610a09565b34801561045b57600080fd5b5061026f61046a36600461213a565b610a1e565b34801561047b57600080fd5b506000546001600160a01b031661023f565b34801561049957600080fd5b50600161037b565b3480156104ad57600080fd5b5061026f6104bc366004611fb3565b610b3d565b3480156104cd57600080fd5b50604080516311f0c6d360e11b81526001602082015201610253565b3480156104f557600080fd5b506102a8600281565b34801561050a57600080fd5b5061026f61051936600461227f565b610b51565b34801561052a57600080fd5b5060025461023f906001600160a01b031681565b34801561054a57600080fd5b5061026f610559366004612358565b610ba9565b34801561056a57600080fd5b5061058b610579366004612399565b60016020526000908152604090205481565b604051908152602001610253565b3480156105a557600080fd5b5061034e6105b43660046123b4565b610bc3565b61026f6105c7366004612358565b610d6b565b3480156105d857600080fd5b506105ec6105e7366004612422565b610ede565b6040516102539190612468565b34801561060557600080fd5b5061026f6106143660046120b7565b610f24565b61026f610627366004611e53565b610fa3565b34801561063857600080fd5b5061026f6106473660046120b7565b610fd2565b34801561065857600080fd5b5061066c610667366004611fb3565b611028565b6040516102539392919061247f565b34801561068757600080fd5b5061026f6106963660046124a9565b6110dd565b3480156106a757600080fd5b5061026f6106b63660046120b7565b611232565b3480156106c757600080fd5b5061026f6106d6366004611fb3565b61126d565b3480156106e757600080fd5b507f000000000000000000000000000000000000000000000000000000000000000061023f565b34801561071a57600080fd5b5061037b610729366004612501565b6112a3565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316331461077e576040516391ac5e4f60e01b81523360048201526024015b60405180910390fd5b6020870180359061079890610793908a612399565b6112d9565b146107d6576107aa6020880188612399565b60405163309afaf360e21b815263ffffffff909116600482015260208801356024820152604401610775565b6107e587878787878787611315565b50505050505050565b6107f6611d4d565b61081133604086013561080c6020880188612399565b611474565b60008061081d866114f9565b90925090506108496108326020880188612399565b8383610843368a90038a018a61251d565b88611638565b805190935033907f986156872b2ee0022b9585231dbbfde457f87f8a16b6c45e1a81c54c4ad8351f61087e60208a018a612399565b6040805163ffffffff9092168252808b013560208301520160405180910390a350509392505050565b6108af611743565b6108bb33826000611770565b50565b6108c6611743565b6108d082826117cb565b5050565b6003602090815260009283526040808420909152908252902080546108f89061254f565b80601f01602080910402602001604051908101604052809291908181526020018280546109249061254f565b80156109715780601f1061094657610100808354040283529160200191610971565b820191906000526020600020905b81548152906001019060200180831161095457829003601f168201915b505050505081565b63ffffffff821660009081526001602052604090205481145b92915050565b6109a0611743565b600480546001600160a01b0319166001600160a01b0383169081179091556040519081527ff0be4f1e87349231d80c36b33f9e8639658eeaf474014dee15a3e6a4d4414197906020015b60405180910390a150565b6109fd611743565b610a076000611820565b565b6001600160a01b03811630145b949350505050565b806001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316636352211e846040518263ffffffff1660e01b8152600401610a7691815260200190565b602060405180830381865afa158015610a93573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ab79190612583565b6001600160a01b031614610b065760405162461bcd60e51b8152602060048201526016602482015275165bdd48191bdb89dd081bdddb881d1a1a5cc813919560521b6044820152606401610775565b60008281526008602052604081208181556001810180546001600160a01b031916905590610b376002830182611d94565b50505050565b610b45611743565b6108bb33826000611474565b60008281526008602090815260409182902083518155908301516001820180546001600160a01b0319166001600160a01b03909216919091179055908201518291906002820190610ba290826125e8565b5050505050565b610bb1611743565b6108d0610bbe82846126a7565b611870565b63ffffffff8416600090815260036020908152604080832061ffff87168452909152812080546060929190610bf79061254f565b80601f0160208091040260200160405190810160405280929190818152602001828054610c239061254f565b8015610c705780601f10610c4557610100808354040283529160200191610c70565b820191906000526020600020905b815481529060010190602001808311610c5357829003601f168201915b505050505090508051600003610cc05783838080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929450610a169350505050565b6000839003610cd0579050610a16565b60028310610d4e57610d1784848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061197792505050565b80610d25846002818861278f565b604051602001610d37939291906127b9565b604051602081830303815290604052915050610a16565b8383604051639a6d49cd60e01b815260040161077592919061280a565b60005b81811015610e5d5736838383818110610d8957610d8961281e565b9050602002810190610d9b9190612834565b9050610db7610dad6020830183612399565b6020830135610979565b610dc15750610e55565b3063d045a0dc60c08301358360a0810135610de0610100830183612855565b610df1610100890160e08a016120b7565b610dff6101208a018a612855565b6040518963ffffffff1660e01b8152600401610e2197969594939291906128b0565b6000604051808303818588803b158015610e3a57600080fd5b505af1158015610e4e573d6000803e3d6000fd5b5050505050505b600101610d6e565b50336001600160a01b0316638e9e70996040518163ffffffff1660e01b8152600401600060405180830381865afa158015610e9c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610ec49190810190612936565b604051638351eea760e01b815260040161077591906120a4565b6040805180820190915260008082526020820152600080610efe856114f9565b9092509050610f1b610f136020870187612399565b8383876119a3565b95945050505050565b610f2c611743565b60405163ca5eb5e160e01b81526001600160a01b0382811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063ca5eb5e190602401600060405180830381600087803b158015610f8f57600080fd5b505af1158015610ba2573d6000803e3d6000fd5b333014610fc35760405163029a949d60e31b815260040160405180910390fd5b6107e5878787878787876107d6565b610fda611743565b600280546001600160a01b0319166001600160a01b0383169081179091556040519081527fd48d879cef83a1c0bdda516f27b13ddb1b3f8bbac1c9e1511bb2a659c2427760906020016109ea565b60086020526000908152604090208054600182015460028301805492936001600160a01b039092169261105a9061254f565b80601f01602080910402602001604051908101604052809291908181526020018280546110869061254f565b80156110d35780601f106110a8576101008083540402835291602001916110d3565b820191906000526020600020905b8154815290600101906020018083116110b657829003601f168201915b5050505050905083565b816001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316636352211e856040518263ffffffff1660e01b815260040161113591815260200190565b602060405180830381865afa158015611152573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111769190612583565b6001600160a01b0316146111c55760405162461bcd60e51b8152602060048201526016602482015275165bdd48191bdb89dd081bdddb881d1a1a5cc813919560521b6044820152606401610775565b604080516060810182528481526001600160a01b038481166020808401918252838501868152600089815260089092529490208351815590516001820180546001600160a01b03191691909316179091559151909190600282019061122a90826125e8565b505050505050565b61123a611743565b6001600160a01b03811661126457604051631e4fbdf760e01b815260006004820152602401610775565b6108bb81611820565b60008181526008602052604081208181556001810180546001600160a01b03191690559061129e6002830182611d94565b505050565b60006020820180359060019083906112bb9086612399565b63ffffffff1681526020810191909152604001600020541492915050565b63ffffffff8116600090815260016020526040812054806109925760405163f6ff4fb760e01b815263ffffffff84166004820152602401610775565b60006113276113248787611a7b565b90565b905060006113358787611a9a565b905061134e828261134960208d018d612399565b611770565b604086111561141257600061138861136c60608c0160408d016129a3565b61137960208d018d612399565b6113838b8b611aaa565b611af5565b604051633e5ac80960e11b81529091506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690637cb59012906113de9086908d9060009087906004016129c0565b600060405180830381600087803b1580156113f857600080fd5b505af115801561140c573d6000803e3d6000fd5b50505050505b6001600160a01b038216887f7883fa30ea56937810e36990b0bbb8d629d0cf59f68baf8431ff657cebe7eef561144b60208d018d612399565b6040805163ffffffff9092168252602082018690520160405180910390a3505050505050505050565b6040516323b872dd60e01b81526001600160a01b038481166004830152306024830152604482018490527f000000000000000000000000000000000000000000000000000000000000000016906323b872dd906064015b600060405180830381600087803b1580156114e557600080fd5b505af11580156107e5573d6000803e3d6000fd5b606080602083013561151e57604051631e4ec46b60e01b815260040160405180910390fd5b60006115746020850135604086013561153a6080880188612855565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611b2492505050565b909350905060008161158757600161158a565b60025b90506115aa61159c6020870187612399565b826105b46060890189612855565b6004549093506001600160a01b031680156116305760405163043a78eb60e01b81526001600160a01b0382169063043a78eb906115ed90889088906004016129fb565b602060405180830381865afa15801561160a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061162e9190612a20565b505b505050915091565b611640611d4d565b600061164f8460000151611b89565b602085015190915015611669576116698460200151611bb1565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632637a450826040518060a001604052808b63ffffffff1681526020016116b98c6112d9565b81526020018a815260200189815260200160008960200151111515815250866040518463ffffffff1660e01b81526004016116f5929190612a3d565b60806040518083038185885af1158015611713573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906117389190612ae6565b979650505050505050565b6000546001600160a01b03163314610a075760405163118cdaa760e01b8152336004820152602401610775565b6040516323b872dd60e01b81523060048201526001600160a01b038481166024830152604482018490527f000000000000000000000000000000000000000000000000000000000000000016906323b872dd906064016114cb565b63ffffffff8216600081815260016020908152604091829020849055815192835282018390527f238399d427b947898edb290f5ff0f9109849b1c3ba196a42e35f00c50a54b98b910160405180910390a15050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60005b8151811015611947576118a28282815181106118915761189161281e565b602002602001015160400151611977565b8181815181106118b4576118b461281e565b602002602001015160400151600360008484815181106118d6576118d661281e565b60200260200101516000015163ffffffff1663ffffffff16815260200190815260200160002060008484815181106119105761191061281e565b60200260200101516020015161ffff1661ffff168152602001908152602001600020908161193e91906125e8565b50600101611873565b507fbe4864a8e820971c0247f5992e2da559595f7bf076a21cb5928d443d2a13b674816040516109ea9190612b30565b600281015161ffff81166003146108d05781604051639a6d49cd60e01b815260040161077591906120a4565b60408051808201909152600080825260208201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ddc28c586040518060a001604052808863ffffffff168152602001611a06896112d9565b8152602001878152602001868152602001851515815250306040518363ffffffff1660e01b8152600401611a3b929190612a3d565b6040805180830381865afa158015611a57573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f1b9190612bbb565b6000611a8a602082848661278f565b611a9391612bd7565b9392505050565b6000611a8a60406020848661278f565b6060611ab9826040818661278f565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929695505050505050565b6060838383604051602001611b0c93929190612bf5565b60405160208183030381529060405290509392505050565b8051606090151580611b58576040805160208101879052908101859052606001604051602081830303815290604052611b7f565b84843385604051602001611b6f9493929190612c3f565b6040516020818303038152906040525b9150935093915050565b6000813414611bad576040516304fb820960e51b8152346004820152602401610775565b5090565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e4fe1d946040518163ffffffff1660e01b8152600401602060405180830381865afa158015611c11573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c359190612583565b90506001600160a01b038116611c5e576040516329b99a9560e11b815260040160405180910390fd5b6040805133602482018190527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0381811660448501526064808501889052855180860390910181526084909401909452602080840180516001600160e01b03166323b872dd60e01b17815284516108d0968816958993610b3793889360009283929091839182885af180611cff576040513d6000823e3d81fd5b50506000513d91508115611d17578060011415611d24565b6001600160a01b0384163b155b15610b3757604051635274afe760e01b81526001600160a01b0385166004820152602401610775565b60405180606001604052806000801916815260200160006001600160401b03168152602001611d8f604051806040016040528060008152602001600081525090565b905290565b508054611da09061254f565b6000825580601f10611db0575050565b601f0160209004906000526020600020908101906108bb91905b80821115611bad5760008155600101611dca565b600060608284031215611df057600080fd5b50919050565b60008083601f840112611e0857600080fd5b5081356001600160401b03811115611e1f57600080fd5b602083019150836020828501011115611e3757600080fd5b9250929050565b6001600160a01b03811681146108bb57600080fd5b600080600080600080600060e0888a031215611e6e57600080fd5b611e788989611dde565b96506060880135955060808801356001600160401b0380821115611e9b57600080fd5b611ea78b838c01611df6565b909750955060a08a01359150611ebc82611e3e565b90935060c08901359080821115611ed257600080fd5b50611edf8a828b01611df6565b989b979a50959850939692959293505050565b600060c08284031215611df057600080fd5b60008060008385036080811215611f1a57600080fd5b84356001600160401b03811115611f3057600080fd5b611f3c87828801611ef2565b9450506040601f1982011215611f5157600080fd5b506020840191506060840135611f6681611e3e565b809150509250925092565b6000608082019050825182526001600160401b0360208401511660208301526040830151611fac604084018280518252602090810151910152565b5092915050565b600060208284031215611fc557600080fd5b5035919050565b803563ffffffff81168114611fe057600080fd5b919050565b60008060408385031215611ff857600080fd5b61200183611fcc565b946020939093013593505050565b803561ffff81168114611fe057600080fd5b6000806040838503121561203457600080fd5b61203d83611fcc565b915061204b6020840161200f565b90509250929050565b60005b8381101561206f578181015183820152602001612057565b50506000910152565b60008151808452612090816020860160208601612054565b601f01601f19169290920160200192915050565b602081526000611a936020830184612078565b6000602082840312156120c957600080fd5b8135611a9381611e3e565b60008060008060a085870312156120ea57600080fd5b6120f48686611dde565b935060608501356001600160401b0381111561210f57600080fd5b61211b87828801611df6565b909450925050608085013561212f81611e3e565b939692955090935050565b6000806040838503121561214d57600080fd5b82359150602083013561215f81611e3e565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b604051606081016001600160401b03811182821017156121a2576121a261216a565b60405290565b604080519081016001600160401b03811182821017156121a2576121a261216a565b604051601f8201601f191681016001600160401b03811182821017156121f2576121f261216a565b604052919050565b60006001600160401b038211156122135761221361216a565b50601f01601f191660200190565b600061223461222f846121fa565b6121ca565b905082815283838301111561224857600080fd5b828260208301376000602084830101529392505050565b600082601f83011261227057600080fd5b611a9383833560208501612221565b6000806040838503121561229257600080fd5b8235915060208301356001600160401b03808211156122b057600080fd5b90840190606082870312156122c457600080fd5b6122cc612180565b8235815260208301356122de81611e3e565b60208201526040830135828111156122f557600080fd5b6123018882860161225f565b6040830152508093505050509250929050565b60008083601f84011261232657600080fd5b5081356001600160401b0381111561233d57600080fd5b6020830191508360208260051b8501011115611e3757600080fd5b6000806020838503121561236b57600080fd5b82356001600160401b0381111561238157600080fd5b61238d85828601612314565b90969095509350505050565b6000602082840312156123ab57600080fd5b611a9382611fcc565b600080600080606085870312156123ca57600080fd5b6123d385611fcc565b93506123e16020860161200f565b925060408501356001600160401b038111156123fc57600080fd5b61240887828801611df6565b95989497509550505050565b80151581146108bb57600080fd5b6000806040838503121561243557600080fd5b82356001600160401b0381111561244b57600080fd5b61245785828601611ef2565b925050602083013561215f81612414565b815181526020808301519082015260408101610992565b8381526001600160a01b0383166020820152606060408201819052600090610f1b90830184612078565b6000806000606084860312156124be57600080fd5b8335925060208401356124d081611e3e565b915060408401356001600160401b038111156124eb57600080fd5b6124f78682870161225f565b9150509250925092565b60006060828403121561251357600080fd5b611a938383611dde565b60006040828403121561252f57600080fd5b6125376121a8565b82358152602083013560208201528091505092915050565b600181811c9082168061256357607f821691505b602082108103611df057634e487b7160e01b600052602260045260246000fd5b60006020828403121561259557600080fd5b8151611a9381611e3e565b601f82111561129e576000816000526020600020601f850160051c810160208610156125c95750805b601f850160051c820191505b8181101561122a578281556001016125d5565b81516001600160401b038111156126015761260161216a565b6126158161260f845461254f565b846125a0565b602080601f83116001811461264a57600084156126325750858301515b600019600386901b1c1916600185901b17855561122a565b600085815260208120601f198616915b828110156126795788860151825594840194600190910190840161265a565b50858210156126975787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60006001600160401b03808411156126c1576126c161216a565b8360051b60206126d28183016121ca565b8681529185019181810190368411156126ea57600080fd5b865b84811015612783578035868111156127045760008081fd5b880160603682900312156127185760008081fd5b612720612180565b61272982611fcc565b815261273686830161200f565b868201526040808301358981111561274e5760008081fd5b929092019136601f8401126127635760008081fd5b612771368435898601612221565b908201528452509183019183016126ec565b50979650505050505050565b6000808585111561279f57600080fd5b838611156127ac57600080fd5b5050820193919092039150565b600084516127cb818460208901612054565b8201838582376000930192835250909392505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b602081526000610a166020830184866127e1565b634e487b7160e01b600052603260045260246000fd5b6000823561013e1983360301811261284b57600080fd5b9190910192915050565b6000808335601e1984360301811261286c57600080fd5b8301803591506001600160401b0382111561288657600080fd5b602001915036819003821315611e3757600080fd5b6001600160401b03811681146108bb57600080fd5b63ffffffff6128be89611fcc565b16815260208801356020820152600060408901356128db8161289b565b6001600160401b03811660408401525087606083015260e0608083015261290660e0830187896127e1565b6001600160a01b03861660a084015282810360c08401526129288185876127e1565b9a9950505050505050505050565b60006020828403121561294857600080fd5b81516001600160401b0381111561295e57600080fd5b8201601f8101841361296f57600080fd5b805161297d61222f826121fa565b81815285602083850101111561299257600080fd5b610f1b826020830160208601612054565b6000602082840312156129b557600080fd5b8135611a938161289b565b60018060a01b038516815283602082015261ffff831660408201526080606082015260006129f16080830184612078565b9695505050505050565b604081526000612a0e6040830185612078565b8281036020840152610f1b8185612078565b600060208284031215612a3257600080fd5b8151611a9381612414565b6040815263ffffffff8351166040820152602083015160608201526000604084015160a06080840152612a7360e0840182612078565b90506060850151603f198483030160a0850152612a908282612078565b60809690960151151560c08501525050506001600160a01b039190911660209091015290565b600060408284031215612ac857600080fd5b612ad06121a8565b9050815181526020820151602082015292915050565b600060808284031215612af857600080fd5b612b00612180565b825181526020830151612b128161289b565b6020820152612b248460408501612ab6565b60408201529392505050565b600060208083018184528085518083526040925060408601915060408160051b87010184880160005b83811015612bad57888303603f190185528151805163ffffffff1684528781015161ffff16888501528601516060878501819052612b9981860183612078565b968901969450505090860190600101612b59565b509098975050505050505050565b600060408284031215612bcd57600080fd5b611a938383612ab6565b8035602083101561099257600019602084900360031b1b1692915050565b60c084901b6001600160c01b031916815260e083901b6001600160e01b03191660088201528151600090612c3081600c850160208701612054565b91909101600c01949350505050565b84815283602082015282604082015260008251612c63816060850160208701612054565b919091016060019594505050505056fea264697066735822122074ea903279871012f8aea8cff80a9179d742bfa6718df502fc49faf7dc9c1fef64736f6c63430008160033a264697066735822122073074e3c79ec4c33021bc3512ffc5420dd443483d35284f74c628acaffcc1b4564736f6c63430008160033",
  "deployedBytecode": "0x6080604052600436106200015b5760003560e01c80637d25a05e11620000c5578063e0539e581162000078578063e0539e581462000438578063e33361f4146200045e578063e830b5c71462000277578063f2fde38b1462000475578063f77e5dd3146200049a578063ff7bd03d14620004ce57600080fd5b80637d25a05e146200030f57806382413eac146200034d5780638da5cb5b1462000391578063b353aaa714620003b1578063bb0b6a5314620003d3578063ca5eb5e1146200041357600080fd5b8063372d6ea0116200011e578063372d6ea0146200020257806343add2e6146200023d5780634466507a14620002775780635e280f11146200029f578063715018a614620002d5578063774d67f914620002ed57600080fd5b806313137d65146200016057806317442b7014620001795780632069e95314620001a15780633398b4ed14620001c65780633400288b14620001dd575b600080fd5b620001776200017136600462000f24565b620004f3565b005b3480156200018657600080fd5b50604080516001815260026020820152015b60405180910390f35b348015620001ae57600080fd5b5062000177620001c036600462000fce565b620005a4565b62000177620001d73660046200100b565b62000645565b348015620001ea57600080fd5b5062000177620001fc366004620010aa565b620006eb565b3480156200020f57600080fd5b5060045462000224906001600160a01b031681565b6040516001600160a01b03909116815260200162000198565b3480156200024a57600080fd5b50620002246200025c36600462000fce565b6005602052600090815260409020546001600160a01b031681565b3480156200028457600080fd5b506200017762000296366004620010d7565b50505050505050565b348015620002ac57600080fd5b50620002247f000000000000000000000000000000000000000000000000000000000000000081565b348015620002e257600080fd5b506200017762000705565b348015620002fa57600080fd5b5060025462000224906001600160a01b031681565b3480156200031c57600080fd5b50620003346200032e366004620010aa565b6200071d565b6040516001600160401b03909116815260200162000198565b3480156200035a57600080fd5b50620003806200036c36600462001167565b6001600160a01b0381163014949350505050565b604051901515815260200162000198565b3480156200039e57600080fd5b506000546001600160a01b031662000224565b348015620003be57600080fd5b5060035462000224906001600160a01b031681565b348015620003e057600080fd5b5062000404620003f2366004620011d5565b60016020526000908152604090205481565b60405190815260200162000198565b3480156200042057600080fd5b50620001776200043236600462000fce565b62000726565b6200044f62000449366004620012a8565b620007b0565b60405162000198919062001327565b620001776200046f3660046200100b565b6200083f565b3480156200048257600080fd5b50620001776200049436600462000fce565b6200089e565b348015620004a757600080fd5b50620004bf620004b93660046200136a565b620008e2565b60405162000198919062001409565b348015620004db57600080fd5b5062000380620004ed36600462001421565b6200092a565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316331462000544576040516391ac5e4f60e01b81523360048201526024015b60405180910390fd5b6020870180359062000562906200055c908a620011d5565b62000962565b146200029657620005776020880188620011d5565b60405163309afaf360e21b815263ffffffff9091166004820152602088013560248201526044016200053b565b600354600454604051600092309285926001600160a01b039283169290911690620005cf9062000e54565b6001600160a01b039485168152928416602084015290831660408301529091166060820152608001604051809103906000f08015801562000614573d6000803e3d6000fd5b506001600160a01b03928316600090815260056020526040902080546001600160a01b031916919093161790915550565b6000620006558284018462001440565b80516001600160a01b039081166000908152600560209081526040918290205490840151828501516060860151935163ef64ba5960e01b81529596509190931693849363ef64ba5993620006ae93919260040162001547565b600060405180830381600087803b158015620006c957600080fd5b505af1158015620006de573d6000803e3d6000fd5b5050505050505050505050565b620006f5620009a0565b620007018282620009cf565b5050565b6200070f620009a0565b6200071b600062000a24565b565b60005b92915050565b62000730620009a0565b60405163ca5eb5e160e01b81526001600160a01b0382811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063ca5eb5e190602401600060405180830381600087803b1580156200079457600080fd5b505af1158015620007a9573d6000803e3d6000fd5b5050505050565b620007ba62000e62565b600084604051602001620007cf919062001573565b60408051601f198184030181526020601f870181900481028401810190925285835292506200083591889184919088908890819084018382808284376000920182905250604080518082019091523481526020810191909152925033915062000a749050565b9695505050505050565b60006200084f8284018462001440565b80516001600160a01b039081166000908152600560209081526040918290205490840151915163f58409b960e01b81526004810192909252929350911690819063f58409b990602401620006ae565b620008a8620009a0565b6001600160a01b038116620008d457604051631e4fbdf760e01b8152600060048201526024016200053b565b620008df8162000a24565b50565b60408051808201909152600080825260208201526000846040516020016200090b919062001573565b6040516020818303038152906040529050620008358682868662000b8d565b6000602082018035906001908390620009449086620011d5565b63ffffffff1681526020810191909152604001600020541492915050565b63ffffffff811660009081526001602052604081205480620007205760405163f6ff4fb760e01b815263ffffffff841660048201526024016200053b565b6000546001600160a01b031633146200071b5760405163118cdaa760e01b81523360048201526024016200053b565b63ffffffff8216600081815260016020908152604091829020849055815192835282018390527f238399d427b947898edb290f5ff0f9109849b1c3ba196a42e35f00c50a54b98b910160405180910390a15050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b62000a7e62000e62565b600062000a8f846000015162000c75565b60208501519091501562000aac5762000aac846020015162000c9f565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632637a450826040518060a001604052808b63ffffffff16815260200162000afe8c62000962565b81526020018a815260200189815260200160008960200151111515815250866040518463ffffffff1660e01b815260040162000b3c92919062001588565b60806040518083038185885af115801562000b5b573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019062000b82919062001657565b979650505050505050565b60408051808201909152600080825260208201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ddc28c586040518060a001604052808863ffffffff16815260200162000bf28962000962565b8152602001878152602001868152602001851515815250306040518363ffffffff1660e01b815260040162000c2992919062001588565b6040805180830381865afa15801562000c46573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000c6c9190620016c6565b95945050505050565b600081341462000c9b576040516304fb820960e51b81523460048201526024016200053b565b5090565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e4fe1d946040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000d00573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000d269190620016e5565b90506001600160a01b03811662000d50576040516329b99a9560e11b815260040160405180910390fd5b6040805133602482018190527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03818116604485015260648085018890528551808603909101815260849094019094526020830180516001600160e01b03166323b872dd60e01b1790526200070193851692869062000dd890859062000dde565b50505050565b600080602060008451602086016000885af18062000e02576040513d6000823e3d81fd5b50506000513d9150811562000e1c57806001141562000e29565b6001600160a01b0384163b155b1562000dd857604051635274afe760e01b81526001600160a01b03851660048201526024016200053b565b612f45806200170683390190565b60405180606001604052806000801916815260200160006001600160401b0316815260200162000ea5604051806040016040528060008152602001600081525090565b905290565b60006060828403121562000ebd57600080fd5b50919050565b60008083601f84011262000ed657600080fd5b5081356001600160401b0381111562000eee57600080fd5b60208301915083602082850101111562000f0757600080fd5b9250929050565b6001600160a01b0381168114620008df57600080fd5b600080600080600080600060e0888a03121562000f4057600080fd5b62000f4c898962000eaa565b96506060880135955060808801356001600160401b038082111562000f7057600080fd5b62000f7e8b838c0162000ec3565b909750955060a08a0135915062000f958262000f0e565b90935060c0890135908082111562000fac57600080fd5b5062000fbb8a828b0162000ec3565b989b979a50959850939692959293505050565b60006020828403121562000fe157600080fd5b813562000fee8162000f0e565b9392505050565b6001600160401b0381168114620008df57600080fd5b6000806000806000608086880312156200102457600080fd5b8535620010318162000f0e565b94506020860135620010438162000ff5565b93506040860135620010558162000ff5565b925060608601356001600160401b038111156200107157600080fd5b6200107f8882890162000ec3565b969995985093965092949392505050565b803563ffffffff81168114620010a557600080fd5b919050565b60008060408385031215620010be57600080fd5b620010c98362001090565b946020939093013593505050565b600080600080600080600060c0888a031215620010f357600080fd5b8735620011008162000f0e565b96506020880135620011128162000ff5565b95506040880135620011248162000ff5565b94506060880135620011368162000f0e565b93506080880135925060a08801356001600160401b038111156200115957600080fd5b62000fbb8a828b0162000ec3565b60008060008060a085870312156200117e57600080fd5b6200118a868662000eaa565b935060608501356001600160401b03811115620011a657600080fd5b620011b48782880162000ec3565b9094509250506080850135620011ca8162000f0e565b939692955090935050565b600060208284031215620011e857600080fd5b62000fee8262001090565b634e487b7160e01b600052604160045260246000fd5b60006001600160401b0380841115620012265762001226620011f3565b604051601f8501601f19908116603f01168101908282118183101715620012515762001251620011f3565b816040528093508581528686860111156200126b57600080fd5b858560208301376000602087830101525050509392505050565b600082601f8301126200129757600080fd5b62000fee8383356020850162001209565b60008060008060608587031215620012bf57600080fd5b620012ca8562001090565b935060208501356001600160401b0380821115620012e757600080fd5b620012f58883890162001285565b945060408701359150808211156200130c57600080fd5b506200131b8782880162000ec3565b95989497509550505050565b6000608082019050825182526001600160401b036020840151166020830152604083015162001363604084018280518252602090810151910152565b5092915050565b600080600080608085870312156200138157600080fd5b6200138c8562001090565b935060208501356001600160401b0380821115620013a957600080fd5b620013b78883890162001285565b94506040870135915080821115620013ce57600080fd5b508501601f81018713620013e157600080fd5b620013f28782356020840162001209565b92505060608501358015158114620011ca57600080fd5b81518152602080830151908201526040810162000720565b6000606082840312156200143457600080fd5b62000fee838362000eaa565b6000602082840312156200145357600080fd5b81356001600160401b03808211156200146b57600080fd5b90830190608082860312156200148057600080fd5b6040516080810181811083821117156200149e576200149e620011f3565b6040528235620014ae8162000f0e565b8152602083810135908201526040830135620014ca8162000f0e565b6040820152606083013582811115620014e257600080fd5b620014f08782860162001285565b60608301525095945050505050565b6000815180845260005b81811015620015275760208185018101518683018201520162001509565b506000602082860101526020601f19601f83011685010191505092915050565b8381526001600160a01b038316602082015260606040820181905260009062000c6c90830184620014ff565b60208152600062000fee6020830184620014ff565b6040815263ffffffff8351166040820152602083015160608201526000604084015160a06080840152620015c060e0840182620014ff565b90506060850151603f198483030160a0850152620015df8282620014ff565b60809690960151151560c08501525050506001600160a01b039190911660209091015290565b6000604082840312156200161857600080fd5b604051604081018181106001600160401b03821117156200163d576200163d620011f3565b604052825181526020928301519281019290925250919050565b6000608082840312156200166a57600080fd5b604051606081018181106001600160401b03821117156200168f576200168f620011f3565b604052825181526020830151620016a68162000ff5565b6020820152620016ba846040850162001605565b60408201529392505050565b600060408284031215620016d957600080fd5b62000fee838362001605565b600060208284031215620016f857600080fd5b815162000fee8162000f0e56fe60c06040523480156200001157600080fd5b5060405162002f4538038062002f458339810160408190526200003491620001cc565b828282818181818181806001600160a01b0381166200006d57604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b62000078816200015f565b506001600160a01b038083166080528116620000a757604051632d618d8160e21b815260040160405180910390fd5b60805160405163ca5eb5e160e01b81526001600160a01b0383811660048301529091169063ca5eb5e190602401600060405180830381600087803b158015620000ef57600080fd5b505af115801562000104573d6000803e3d6000fd5b5050506001600160a01b03998a1660a0525050600580549c89166001600160a01b03199d8e16179055505060068054988716988b16989098179097555050600780549490931693909616929092179055506200022992505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b0381168114620001c757600080fd5b919050565b60008060008060808587031215620001e357600080fd5b620001ee85620001af565b9350620001fe60208601620001af565b92506200020e60408601620001af565b91506200021e60608601620001af565b905092959194509250565b60805160a051612ca96200029c600039600081816106ea01528181610a2a015281816110e9015281816114a0015261179c01526000818161039d0152818161073001528181610f4b015281816113a20152818161166b015281816119b901528181611bb50152611c6c0152612ca96000f3fe60806040526004361061021a5760003560e01c8063a694fc3a11610123578063c6414e7b116100ab578063ef64ba591161006f578063ef64ba591461067b578063f2fde38b1461069b578063f58409b9146106bb578063fc0c546a146106db578063ff7bd03d1461070e57600080fd5b8063c6414e7b146105cc578063ca5eb5e1146105f9578063d045a0dc14610619578063d42438851461062c578063e9ef21131461064c57600080fd5b8063b731ea0a116100f2578063b731ea0a1461051e578063b98bd0701461053e578063bb0b6a531461055e578063bc70b35414610599578063bd815db0146105b957600080fd5b8063a694fc3a146104a1578063a72f5dd8146104c1578063b21a33e4146104e9578063b50ecb74146104fe57600080fd5b80635a0dfe4d116101a65780637d25a05e116101755780637d25a05e146103f457806382413eac1461042f578063850729601461044f5780638da5cb5b1461046f5780639f68b9641461048d57600080fd5b80635a0dfe4d1461035b5780635e280f111461038b5780636fc1b31e146103bf578063715018a6146103df57600080fd5b806321eb730b116101ed57806321eb730b146102bb5780632e17de78146102db5780633400288b146102fb57806352ae28791461031b5780635535d4611461032e57600080fd5b8063111ecdad1461021f57806313137d651461025c57806317442b70146102715780631f5e133414610293575b600080fd5b34801561022b57600080fd5b5060045461023f906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61026f61026a366004611e53565b61072e565b005b34801561027d57600080fd5b5060408051600181526002602082015201610253565b34801561029f57600080fd5b506102a8600181565b60405161ffff9091168152602001610253565b6102ce6102c9366004611f04565b6107ee565b6040516102539190611f71565b3480156102e757600080fd5b5061026f6102f6366004611fb3565b6108a7565b34801561030757600080fd5b5061026f610316366004611fe5565b6108be565b34801561032757600080fd5b503061023f565b34801561033a57600080fd5b5061034e610349366004612021565b6108d4565b60405161025391906120a4565b34801561036757600080fd5b5061037b610376366004611fe5565b610979565b6040519015158152602001610253565b34801561039757600080fd5b5061023f7f000000000000000000000000000000000000000000000000000000000000000081565b3480156103cb57600080fd5b5061026f6103da3660046120b7565b610998565b3480156103eb57600080fd5b5061026f6109f5565b34801561040057600080fd5b5061041761040f366004611fe5565b600092915050565b6040516001600160401b039091168152602001610253565b34801561043b57600080fd5b5061037b61044a3660046120d4565b610a09565b34801561045b57600080fd5b5061026f61046a36600461213a565b610a1e565b34801561047b57600080fd5b506000546001600160a01b031661023f565b34801561049957600080fd5b50600161037b565b3480156104ad57600080fd5b5061026f6104bc366004611fb3565b610b3d565b3480156104cd57600080fd5b50604080516311f0c6d360e11b81526001602082015201610253565b3480156104f557600080fd5b506102a8600281565b34801561050a57600080fd5b5061026f61051936600461227f565b610b51565b34801561052a57600080fd5b5060025461023f906001600160a01b031681565b34801561054a57600080fd5b5061026f610559366004612358565b610ba9565b34801561056a57600080fd5b5061058b610579366004612399565b60016020526000908152604090205481565b604051908152602001610253565b3480156105a557600080fd5b5061034e6105b43660046123b4565b610bc3565b61026f6105c7366004612358565b610d6b565b3480156105d857600080fd5b506105ec6105e7366004612422565b610ede565b6040516102539190612468565b34801561060557600080fd5b5061026f6106143660046120b7565b610f24565b61026f610627366004611e53565b610fa3565b34801561063857600080fd5b5061026f6106473660046120b7565b610fd2565b34801561065857600080fd5b5061066c610667366004611fb3565b611028565b6040516102539392919061247f565b34801561068757600080fd5b5061026f6106963660046124a9565b6110dd565b3480156106a757600080fd5b5061026f6106b63660046120b7565b611232565b3480156106c757600080fd5b5061026f6106d6366004611fb3565b61126d565b3480156106e757600080fd5b507f000000000000000000000000000000000000000000000000000000000000000061023f565b34801561071a57600080fd5b5061037b610729366004612501565b6112a3565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316331461077e576040516391ac5e4f60e01b81523360048201526024015b60405180910390fd5b6020870180359061079890610793908a612399565b6112d9565b146107d6576107aa6020880188612399565b60405163309afaf360e21b815263ffffffff909116600482015260208801356024820152604401610775565b6107e587878787878787611315565b50505050505050565b6107f6611d4d565b61081133604086013561080c6020880188612399565b611474565b60008061081d866114f9565b90925090506108496108326020880188612399565b8383610843368a90038a018a61251d565b88611638565b805190935033907f986156872b2ee0022b9585231dbbfde457f87f8a16b6c45e1a81c54c4ad8351f61087e60208a018a612399565b6040805163ffffffff9092168252808b013560208301520160405180910390a350509392505050565b6108af611743565b6108bb33826000611770565b50565b6108c6611743565b6108d082826117cb565b5050565b6003602090815260009283526040808420909152908252902080546108f89061254f565b80601f01602080910402602001604051908101604052809291908181526020018280546109249061254f565b80156109715780601f1061094657610100808354040283529160200191610971565b820191906000526020600020905b81548152906001019060200180831161095457829003601f168201915b505050505081565b63ffffffff821660009081526001602052604090205481145b92915050565b6109a0611743565b600480546001600160a01b0319166001600160a01b0383169081179091556040519081527ff0be4f1e87349231d80c36b33f9e8639658eeaf474014dee15a3e6a4d4414197906020015b60405180910390a150565b6109fd611743565b610a076000611820565b565b6001600160a01b03811630145b949350505050565b806001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316636352211e846040518263ffffffff1660e01b8152600401610a7691815260200190565b602060405180830381865afa158015610a93573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ab79190612583565b6001600160a01b031614610b065760405162461bcd60e51b8152602060048201526016602482015275165bdd48191bdb89dd081bdddb881d1a1a5cc813919560521b6044820152606401610775565b60008281526008602052604081208181556001810180546001600160a01b031916905590610b376002830182611d94565b50505050565b610b45611743565b6108bb33826000611474565b60008281526008602090815260409182902083518155908301516001820180546001600160a01b0319166001600160a01b03909216919091179055908201518291906002820190610ba290826125e8565b5050505050565b610bb1611743565b6108d0610bbe82846126a7565b611870565b63ffffffff8416600090815260036020908152604080832061ffff87168452909152812080546060929190610bf79061254f565b80601f0160208091040260200160405190810160405280929190818152602001828054610c239061254f565b8015610c705780601f10610c4557610100808354040283529160200191610c70565b820191906000526020600020905b815481529060010190602001808311610c5357829003601f168201915b505050505090508051600003610cc05783838080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929450610a169350505050565b6000839003610cd0579050610a16565b60028310610d4e57610d1784848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061197792505050565b80610d25846002818861278f565b604051602001610d37939291906127b9565b604051602081830303815290604052915050610a16565b8383604051639a6d49cd60e01b815260040161077592919061280a565b60005b81811015610e5d5736838383818110610d8957610d8961281e565b9050602002810190610d9b9190612834565b9050610db7610dad6020830183612399565b6020830135610979565b610dc15750610e55565b3063d045a0dc60c08301358360a0810135610de0610100830183612855565b610df1610100890160e08a016120b7565b610dff6101208a018a612855565b6040518963ffffffff1660e01b8152600401610e2197969594939291906128b0565b6000604051808303818588803b158015610e3a57600080fd5b505af1158015610e4e573d6000803e3d6000fd5b5050505050505b600101610d6e565b50336001600160a01b0316638e9e70996040518163ffffffff1660e01b8152600401600060405180830381865afa158015610e9c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610ec49190810190612936565b604051638351eea760e01b815260040161077591906120a4565b6040805180820190915260008082526020820152600080610efe856114f9565b9092509050610f1b610f136020870187612399565b8383876119a3565b95945050505050565b610f2c611743565b60405163ca5eb5e160e01b81526001600160a01b0382811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063ca5eb5e190602401600060405180830381600087803b158015610f8f57600080fd5b505af1158015610ba2573d6000803e3d6000fd5b333014610fc35760405163029a949d60e31b815260040160405180910390fd5b6107e5878787878787876107d6565b610fda611743565b600280546001600160a01b0319166001600160a01b0383169081179091556040519081527fd48d879cef83a1c0bdda516f27b13ddb1b3f8bbac1c9e1511bb2a659c2427760906020016109ea565b60086020526000908152604090208054600182015460028301805492936001600160a01b039092169261105a9061254f565b80601f01602080910402602001604051908101604052809291908181526020018280546110869061254f565b80156110d35780601f106110a8576101008083540402835291602001916110d3565b820191906000526020600020905b8154815290600101906020018083116110b657829003601f168201915b5050505050905083565b816001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316636352211e856040518263ffffffff1660e01b815260040161113591815260200190565b602060405180830381865afa158015611152573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111769190612583565b6001600160a01b0316146111c55760405162461bcd60e51b8152602060048201526016602482015275165bdd48191bdb89dd081bdddb881d1a1a5cc813919560521b6044820152606401610775565b604080516060810182528481526001600160a01b038481166020808401918252838501868152600089815260089092529490208351815590516001820180546001600160a01b03191691909316179091559151909190600282019061122a90826125e8565b505050505050565b61123a611743565b6001600160a01b03811661126457604051631e4fbdf760e01b815260006004820152602401610775565b6108bb81611820565b60008181526008602052604081208181556001810180546001600160a01b03191690559061129e6002830182611d94565b505050565b60006020820180359060019083906112bb9086612399565b63ffffffff1681526020810191909152604001600020541492915050565b63ffffffff8116600090815260016020526040812054806109925760405163f6ff4fb760e01b815263ffffffff84166004820152602401610775565b60006113276113248787611a7b565b90565b905060006113358787611a9a565b905061134e828261134960208d018d612399565b611770565b604086111561141257600061138861136c60608c0160408d016129a3565b61137960208d018d612399565b6113838b8b611aaa565b611af5565b604051633e5ac80960e11b81529091506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690637cb59012906113de9086908d9060009087906004016129c0565b600060405180830381600087803b1580156113f857600080fd5b505af115801561140c573d6000803e3d6000fd5b50505050505b6001600160a01b038216887f7883fa30ea56937810e36990b0bbb8d629d0cf59f68baf8431ff657cebe7eef561144b60208d018d612399565b6040805163ffffffff9092168252602082018690520160405180910390a3505050505050505050565b6040516323b872dd60e01b81526001600160a01b038481166004830152306024830152604482018490527f000000000000000000000000000000000000000000000000000000000000000016906323b872dd906064015b600060405180830381600087803b1580156114e557600080fd5b505af11580156107e5573d6000803e3d6000fd5b606080602083013561151e57604051631e4ec46b60e01b815260040160405180910390fd5b60006115746020850135604086013561153a6080880188612855565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611b2492505050565b909350905060008161158757600161158a565b60025b90506115aa61159c6020870187612399565b826105b46060890189612855565b6004549093506001600160a01b031680156116305760405163043a78eb60e01b81526001600160a01b0382169063043a78eb906115ed90889088906004016129fb565b602060405180830381865afa15801561160a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061162e9190612a20565b505b505050915091565b611640611d4d565b600061164f8460000151611b89565b602085015190915015611669576116698460200151611bb1565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632637a450826040518060a001604052808b63ffffffff1681526020016116b98c6112d9565b81526020018a815260200189815260200160008960200151111515815250866040518463ffffffff1660e01b81526004016116f5929190612a3d565b60806040518083038185885af1158015611713573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906117389190612ae6565b979650505050505050565b6000546001600160a01b03163314610a075760405163118cdaa760e01b8152336004820152602401610775565b6040516323b872dd60e01b81523060048201526001600160a01b038481166024830152604482018490527f000000000000000000000000000000000000000000000000000000000000000016906323b872dd906064016114cb565b63ffffffff8216600081815260016020908152604091829020849055815192835282018390527f238399d427b947898edb290f5ff0f9109849b1c3ba196a42e35f00c50a54b98b910160405180910390a15050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60005b8151811015611947576118a28282815181106118915761189161281e565b602002602001015160400151611977565b8181815181106118b4576118b461281e565b602002602001015160400151600360008484815181106118d6576118d661281e565b60200260200101516000015163ffffffff1663ffffffff16815260200190815260200160002060008484815181106119105761191061281e565b60200260200101516020015161ffff1661ffff168152602001908152602001600020908161193e91906125e8565b50600101611873565b507fbe4864a8e820971c0247f5992e2da559595f7bf076a21cb5928d443d2a13b674816040516109ea9190612b30565b600281015161ffff81166003146108d05781604051639a6d49cd60e01b815260040161077591906120a4565b60408051808201909152600080825260208201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ddc28c586040518060a001604052808863ffffffff168152602001611a06896112d9565b8152602001878152602001868152602001851515815250306040518363ffffffff1660e01b8152600401611a3b929190612a3d565b6040805180830381865afa158015611a57573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f1b9190612bbb565b6000611a8a602082848661278f565b611a9391612bd7565b9392505050565b6000611a8a60406020848661278f565b6060611ab9826040818661278f565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929695505050505050565b6060838383604051602001611b0c93929190612bf5565b60405160208183030381529060405290509392505050565b8051606090151580611b58576040805160208101879052908101859052606001604051602081830303815290604052611b7f565b84843385604051602001611b6f9493929190612c3f565b6040516020818303038152906040525b9150935093915050565b6000813414611bad576040516304fb820960e51b8152346004820152602401610775565b5090565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e4fe1d946040518163ffffffff1660e01b8152600401602060405180830381865afa158015611c11573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c359190612583565b90506001600160a01b038116611c5e576040516329b99a9560e11b815260040160405180910390fd5b6040805133602482018190527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0381811660448501526064808501889052855180860390910181526084909401909452602080840180516001600160e01b03166323b872dd60e01b17815284516108d0968816958993610b3793889360009283929091839182885af180611cff576040513d6000823e3d81fd5b50506000513d91508115611d17578060011415611d24565b6001600160a01b0384163b155b15610b3757604051635274afe760e01b81526001600160a01b0385166004820152602401610775565b60405180606001604052806000801916815260200160006001600160401b03168152602001611d8f604051806040016040528060008152602001600081525090565b905290565b508054611da09061254f565b6000825580601f10611db0575050565b601f0160209004906000526020600020908101906108bb91905b80821115611bad5760008155600101611dca565b600060608284031215611df057600080fd5b50919050565b60008083601f840112611e0857600080fd5b5081356001600160401b03811115611e1f57600080fd5b602083019150836020828501011115611e3757600080fd5b9250929050565b6001600160a01b03811681146108bb57600080fd5b600080600080600080600060e0888a031215611e6e57600080fd5b611e788989611dde565b96506060880135955060808801356001600160401b0380821115611e9b57600080fd5b611ea78b838c01611df6565b909750955060a08a01359150611ebc82611e3e565b90935060c08901359080821115611ed257600080fd5b50611edf8a828b01611df6565b989b979a50959850939692959293505050565b600060c08284031215611df057600080fd5b60008060008385036080811215611f1a57600080fd5b84356001600160401b03811115611f3057600080fd5b611f3c87828801611ef2565b9450506040601f1982011215611f5157600080fd5b506020840191506060840135611f6681611e3e565b809150509250925092565b6000608082019050825182526001600160401b0360208401511660208301526040830151611fac604084018280518252602090810151910152565b5092915050565b600060208284031215611fc557600080fd5b5035919050565b803563ffffffff81168114611fe057600080fd5b919050565b60008060408385031215611ff857600080fd5b61200183611fcc565b946020939093013593505050565b803561ffff81168114611fe057600080fd5b6000806040838503121561203457600080fd5b61203d83611fcc565b915061204b6020840161200f565b90509250929050565b60005b8381101561206f578181015183820152602001612057565b50506000910152565b60008151808452612090816020860160208601612054565b601f01601f19169290920160200192915050565b602081526000611a936020830184612078565b6000602082840312156120c957600080fd5b8135611a9381611e3e565b60008060008060a085870312156120ea57600080fd5b6120f48686611dde565b935060608501356001600160401b0381111561210f57600080fd5b61211b87828801611df6565b909450925050608085013561212f81611e3e565b939692955090935050565b6000806040838503121561214d57600080fd5b82359150602083013561215f81611e3e565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b604051606081016001600160401b03811182821017156121a2576121a261216a565b60405290565b604080519081016001600160401b03811182821017156121a2576121a261216a565b604051601f8201601f191681016001600160401b03811182821017156121f2576121f261216a565b604052919050565b60006001600160401b038211156122135761221361216a565b50601f01601f191660200190565b600061223461222f846121fa565b6121ca565b905082815283838301111561224857600080fd5b828260208301376000602084830101529392505050565b600082601f83011261227057600080fd5b611a9383833560208501612221565b6000806040838503121561229257600080fd5b8235915060208301356001600160401b03808211156122b057600080fd5b90840190606082870312156122c457600080fd5b6122cc612180565b8235815260208301356122de81611e3e565b60208201526040830135828111156122f557600080fd5b6123018882860161225f565b6040830152508093505050509250929050565b60008083601f84011261232657600080fd5b5081356001600160401b0381111561233d57600080fd5b6020830191508360208260051b8501011115611e3757600080fd5b6000806020838503121561236b57600080fd5b82356001600160401b0381111561238157600080fd5b61238d85828601612314565b90969095509350505050565b6000602082840312156123ab57600080fd5b611a9382611fcc565b600080600080606085870312156123ca57600080fd5b6123d385611fcc565b93506123e16020860161200f565b925060408501356001600160401b038111156123fc57600080fd5b61240887828801611df6565b95989497509550505050565b80151581146108bb57600080fd5b6000806040838503121561243557600080fd5b82356001600160401b0381111561244b57600080fd5b61245785828601611ef2565b925050602083013561215f81612414565b815181526020808301519082015260408101610992565b8381526001600160a01b0383166020820152606060408201819052600090610f1b90830184612078565b6000806000606084860312156124be57600080fd5b8335925060208401356124d081611e3e565b915060408401356001600160401b038111156124eb57600080fd5b6124f78682870161225f565b9150509250925092565b60006060828403121561251357600080fd5b611a938383611dde565b60006040828403121561252f57600080fd5b6125376121a8565b82358152602083013560208201528091505092915050565b600181811c9082168061256357607f821691505b602082108103611df057634e487b7160e01b600052602260045260246000fd5b60006020828403121561259557600080fd5b8151611a9381611e3e565b601f82111561129e576000816000526020600020601f850160051c810160208610156125c95750805b601f850160051c820191505b8181101561122a578281556001016125d5565b81516001600160401b038111156126015761260161216a565b6126158161260f845461254f565b846125a0565b602080601f83116001811461264a57600084156126325750858301515b600019600386901b1c1916600185901b17855561122a565b600085815260208120601f198616915b828110156126795788860151825594840194600190910190840161265a565b50858210156126975787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60006001600160401b03808411156126c1576126c161216a565b8360051b60206126d28183016121ca565b8681529185019181810190368411156126ea57600080fd5b865b84811015612783578035868111156127045760008081fd5b880160603682900312156127185760008081fd5b612720612180565b61272982611fcc565b815261273686830161200f565b868201526040808301358981111561274e5760008081fd5b929092019136601f8401126127635760008081fd5b612771368435898601612221565b908201528452509183019183016126ec565b50979650505050505050565b6000808585111561279f57600080fd5b838611156127ac57600080fd5b5050820193919092039150565b600084516127cb818460208901612054565b8201838582376000930192835250909392505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b602081526000610a166020830184866127e1565b634e487b7160e01b600052603260045260246000fd5b6000823561013e1983360301811261284b57600080fd5b9190910192915050565b6000808335601e1984360301811261286c57600080fd5b8301803591506001600160401b0382111561288657600080fd5b602001915036819003821315611e3757600080fd5b6001600160401b03811681146108bb57600080fd5b63ffffffff6128be89611fcc565b16815260208801356020820152600060408901356128db8161289b565b6001600160401b03811660408401525087606083015260e0608083015261290660e0830187896127e1565b6001600160a01b03861660a084015282810360c08401526129288185876127e1565b9a9950505050505050505050565b60006020828403121561294857600080fd5b81516001600160401b0381111561295e57600080fd5b8201601f8101841361296f57600080fd5b805161297d61222f826121fa565b81815285602083850101111561299257600080fd5b610f1b826020830160208601612054565b6000602082840312156129b557600080fd5b8135611a938161289b565b60018060a01b038516815283602082015261ffff831660408201526080606082015260006129f16080830184612078565b9695505050505050565b604081526000612a0e6040830185612078565b8281036020840152610f1b8185612078565b600060208284031215612a3257600080fd5b8151611a9381612414565b6040815263ffffffff8351166040820152602083015160608201526000604084015160a06080840152612a7360e0840182612078565b90506060850151603f198483030160a0850152612a908282612078565b60809690960151151560c08501525050506001600160a01b039190911660209091015290565b600060408284031215612ac857600080fd5b612ad06121a8565b9050815181526020820151602082015292915050565b600060808284031215612af857600080fd5b612b00612180565b825181526020830151612b128161289b565b6020820152612b248460408501612ab6565b60408201529392505050565b600060208083018184528085518083526040925060408601915060408160051b87010184880160005b83811015612bad57888303603f190185528151805163ffffffff1684528781015161ffff16888501528601516060878501819052612b9981860183612078565b968901969450505090860190600101612b59565b509098975050505050505050565b600060408284031215612bcd57600080fd5b611a938383612ab6565b8035602083101561099257600019602084900360031b1b1692915050565b60c084901b6001600160c01b031916815260e083901b6001600160e01b03191660088201528151600090612c3081600c850160208701612054565b91909101600c01949350505050565b84815283602082015282604082015260008251612c63816060850160208701612054565b919091016060019594505050505056fea264697066735822122074ea903279871012f8aea8cff80a9179d742bfa6718df502fc49faf7dc9c1fef64736f6c63430008160033a264697066735822122073074e3c79ec4c33021bc3512ffc5420dd443483d35284f74c628acaffcc1b4564736f6c63430008160033",
  "devdoc": {
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC-20 token failed."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "allowInitializePath((uint32,bytes32,uint64))": {
        "details": "This indicates to the endpoint that the OApp has enabled msgs for this particular path to be received.This defaults to assuming if a peer has been set, its initialized. Can be overridden by the OApp if there is other logic to determine this.",
        "params": {
          "origin": "The origin information containing the source endpoint and sender address."
        },
        "returns": {
          "_0": "Whether the path has been initialized."
        }
      },
      "isComposeMsgSender((uint32,bytes32,uint64),bytes,address)": {
        "details": "_origin The origin information containing the source endpoint and sender address.  - srcEid: The source chain endpoint ID.  - sender: The sender address on the src chain.  - nonce: The nonce of the message._message The lzReceive payload.Applications can optionally choose to implement separate composeMsg senders that are NOT the bridging layer.The default sender IS the OAppReceiver implementer.",
        "params": {
          "_sender": "The sender address."
        },
        "returns": {
          "_0": "isSender Is a valid sender."
        }
      },
      "lzReceive((uint32,bytes32,uint64),bytes32,bytes,address,bytes)": {
        "details": "Entry point for receiving messages or packets from the endpoint.Entry point for receiving msg/packet from the LayerZero endpoint.",
        "params": {
          "_executor": "The address of the executor for the received message.",
          "_extraData": "Additional arbitrary data provided by the corresponding executor.",
          "_guid": "The unique identifier for the received LayerZero message.",
          "_message": "The payload of the received message.",
          "_origin": "The origin information containing the source endpoint and sender address.  - srcEid: The source chain endpoint ID.  - sender: The sender address on the src chain.  - nonce: The nonce of the message."
        }
      },
      "nextNonce(uint32,bytes32)": {
        "details": "_srcEid The source endpoint ID._sender The sender address.The path nonce starts from 1. If 0 is returned it means that there is NO nonce ordered enforcement.Is required by the off-chain executor to determine the OApp expects msg execution is ordered.This is also enforced by the OApp.By default this is NOT enabled. ie. nextNonce is hardcoded to return 0.",
        "returns": {
          "nonce": "The next nonce."
        }
      },
      "oAppVersion()": {
        "returns": {
          "receiverVersion": "The version of the OAppReceiver.sol implementation.",
          "senderVersion": "The version of the OAppSender.sol implementation."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "setDelegate(address)": {
        "details": "Only the owner/admin of the OApp can call this function.Provides the ability for a delegate to set configs, on behalf of the OApp, directly on the Endpoint contract.",
        "params": {
          "_delegate": "The address of the delegate to be set."
        }
      },
      "setPeer(uint32,bytes32)": {
        "details": "Only the owner/admin of the OApp can call this function.Indicates that the peer is trusted to send LayerZero messages to this OApp.Set this to bytes32(0) to remove the peer address.Peer is a bytes32 to accommodate non-evm chains.",
        "params": {
          "_eid": "The endpoint ID.",
          "_peer": "The address of the peer to be associated with the corresponding endpoint."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "allowInitializePath((uint32,bytes32,uint64))": {
        "notice": "Checks if the path initialization is allowed based on the provided origin."
      },
      "endpoint()": {
        "notice": "Retrieves the LayerZero endpoint associated with the OApp."
      },
      "isComposeMsgSender((uint32,bytes32,uint64),bytes,address)": {
        "notice": "Indicates whether an address is an approved composeMsg sender to the Endpoint."
      },
      "nextNonce(uint32,bytes32)": {
        "notice": "Retrieves the next nonce for a given source endpoint and sender address."
      },
      "oAppVersion()": {
        "notice": "Retrieves the OApp version information."
      },
      "peers(uint32)": {
        "notice": "Retrieves the peer (OApp) associated with a corresponding endpoint."
      },
      "setDelegate(address)": {
        "notice": "Sets the delegate address for the OApp."
      },
      "setPeer(uint32,bytes32)": {
        "notice": "Sets the peer address (OApp instance) for a corresponding endpoint."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4133,
        "contract": "contracts/Curator.sol:Curator",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2021,
        "contract": "contracts/Curator.sol:Curator",
        "label": "peers",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint32,t_bytes32)"
      },
      {
        "astId": 5493,
        "contract": "contracts/Curator.sol:Curator",
        "label": "galleryAddress",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 5495,
        "contract": "contracts/Curator.sol:Curator",
        "label": "lzEndpoint",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 5497,
        "contract": "contracts/Curator.sol:Curator",
        "label": "curatorDelegate",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 5501,
        "contract": "contracts/Curator.sol:Curator",
        "label": "collections",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint32,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}