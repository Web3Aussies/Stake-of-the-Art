/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AppImport } from './routes/app'
import { Route as AppIndexImport } from './routes/app/index'
import { Route as AppOnboardingImport } from './routes/app/onboarding'
import { Route as AppAssetsNewImport } from './routes/app/assets/new'

// Create Virtual Routes

const IndexLazyImport = createFileRoute('/')()

// Create/Update Routes

const AppRoute = AppImport.update({
  id: '/app',
  path: '/app',
  getParentRoute: () => rootRoute,
} as any)

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const AppIndexRoute = AppIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AppRoute,
} as any)

const AppOnboardingRoute = AppOnboardingImport.update({
  id: '/onboarding',
  path: '/onboarding',
  getParentRoute: () => AppRoute,
} as any)

const AppAssetsNewRoute = AppAssetsNewImport.update({
  id: '/assets/new',
  path: '/assets/new',
  getParentRoute: () => AppRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/app': {
      id: '/app'
      path: '/app'
      fullPath: '/app'
      preLoaderRoute: typeof AppImport
      parentRoute: typeof rootRoute
    }
    '/app/onboarding': {
      id: '/app/onboarding'
      path: '/onboarding'
      fullPath: '/app/onboarding'
      preLoaderRoute: typeof AppOnboardingImport
      parentRoute: typeof AppImport
    }
    '/app/': {
      id: '/app/'
      path: '/'
      fullPath: '/app/'
      preLoaderRoute: typeof AppIndexImport
      parentRoute: typeof AppImport
    }
    '/app/assets/new': {
      id: '/app/assets/new'
      path: '/assets/new'
      fullPath: '/app/assets/new'
      preLoaderRoute: typeof AppAssetsNewImport
      parentRoute: typeof AppImport
    }
  }
}

// Create and export the route tree

interface AppRouteChildren {
  AppOnboardingRoute: typeof AppOnboardingRoute
  AppIndexRoute: typeof AppIndexRoute
  AppAssetsNewRoute: typeof AppAssetsNewRoute
}

const AppRouteChildren: AppRouteChildren = {
  AppOnboardingRoute: AppOnboardingRoute,
  AppIndexRoute: AppIndexRoute,
  AppAssetsNewRoute: AppAssetsNewRoute,
}

const AppRouteWithChildren = AppRoute._addFileChildren(AppRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/app': typeof AppRouteWithChildren
  '/app/onboarding': typeof AppOnboardingRoute
  '/app/': typeof AppIndexRoute
  '/app/assets/new': typeof AppAssetsNewRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/app/onboarding': typeof AppOnboardingRoute
  '/app': typeof AppIndexRoute
  '/app/assets/new': typeof AppAssetsNewRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/app': typeof AppRouteWithChildren
  '/app/onboarding': typeof AppOnboardingRoute
  '/app/': typeof AppIndexRoute
  '/app/assets/new': typeof AppAssetsNewRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/app' | '/app/onboarding' | '/app/' | '/app/assets/new'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/app/onboarding' | '/app' | '/app/assets/new'
  id:
    | '__root__'
    | '/'
    | '/app'
    | '/app/onboarding'
    | '/app/'
    | '/app/assets/new'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  AppRoute: typeof AppRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  AppRoute: AppRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/app"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/app": {
      "filePath": "app.tsx",
      "children": [
        "/app/onboarding",
        "/app/",
        "/app/assets/new"
      ]
    },
    "/app/onboarding": {
      "filePath": "app/onboarding.tsx",
      "parent": "/app"
    },
    "/app/": {
      "filePath": "app/index.tsx",
      "parent": "/app"
    },
    "/app/assets/new": {
      "filePath": "app/assets/new.tsx",
      "parent": "/app"
    }
  }
}
ROUTE_MANIFEST_END */
