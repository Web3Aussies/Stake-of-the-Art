/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AppIndexImport } from './routes/_app/index'
import { Route as AppExploreImport } from './routes/_app/explore'
import { Route as AppImageIdIndexImport } from './routes/_app/image/$id/index'

// Create/Update Routes

const AppIndexRoute = AppIndexImport.update({
  id: '/_app/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const AppExploreRoute = AppExploreImport.update({
  id: '/_app/explore',
  path: '/explore',
  getParentRoute: () => rootRoute,
} as any)

const AppImageIdIndexRoute = AppImageIdIndexImport.update({
  id: '/_app/image/$id/',
  path: '/image/$id/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_app/explore': {
      id: '/_app/explore'
      path: '/explore'
      fullPath: '/explore'
      preLoaderRoute: typeof AppExploreImport
      parentRoute: typeof rootRoute
    }
    '/_app/': {
      id: '/_app/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AppIndexImport
      parentRoute: typeof rootRoute
    }
    '/_app/image/$id/': {
      id: '/_app/image/$id/'
      path: '/image/$id'
      fullPath: '/image/$id'
      preLoaderRoute: typeof AppImageIdIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/explore': typeof AppExploreRoute
  '/': typeof AppIndexRoute
  '/image/$id': typeof AppImageIdIndexRoute
}

export interface FileRoutesByTo {
  '/explore': typeof AppExploreRoute
  '/': typeof AppIndexRoute
  '/image/$id': typeof AppImageIdIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_app/explore': typeof AppExploreRoute
  '/_app/': typeof AppIndexRoute
  '/_app/image/$id/': typeof AppImageIdIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/explore' | '/' | '/image/$id'
  fileRoutesByTo: FileRoutesByTo
  to: '/explore' | '/' | '/image/$id'
  id: '__root__' | '/_app/explore' | '/_app/' | '/_app/image/$id/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  AppExploreRoute: typeof AppExploreRoute
  AppIndexRoute: typeof AppIndexRoute
  AppImageIdIndexRoute: typeof AppImageIdIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  AppExploreRoute: AppExploreRoute,
  AppIndexRoute: AppIndexRoute,
  AppImageIdIndexRoute: AppImageIdIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_app/explore",
        "/_app/",
        "/_app/image/$id/"
      ]
    },
    "/_app/explore": {
      "filePath": "_app/explore.tsx"
    },
    "/_app/": {
      "filePath": "_app/index.tsx"
    },
    "/_app/image/$id/": {
      "filePath": "_app/image/$id/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
